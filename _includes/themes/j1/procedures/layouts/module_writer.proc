{% comment %}
 # -----------------------------------------------------------------------------
 # ~/_includes/themes/j1/procedures/layouts/module_writer.proc
 # Liquid PROCEDURE to write|place the HTML markup for Javascript init
 # scripts defined for a layout
 #
 # Product/Info:
 # https://jekyll.one
 #
 # Copyright (C) 2020 Juergen Adams
 #
 # J1 Template is licensed under the MIT License.
 # See: https://github.com/jekyll-one-org/J1 Template/blob/master/LICENSE
 # -----------------------------------------------------------------------------
 # Test data:
 #    liquid_var:  {{ liquid_var | debug }}
 # -----------------------------------------------------------------------------
{% endcomment %}

{% comment %} liquid procedures
-------------------------------------------------------------------------------- {% endcomment %}
{% include themes/{{site.template.name}}/procedures/global/set_base_vars_folders.proc %}

{% comment %}
jadams, 2019-08-23: globals set via layouts/default.html (!!!)
NO need to load this again
--------------------------------------------------------------------------------
{% include themes/{{site.template.name}}/procedures/global/set_base_vars_folders.proc %}
--------------------------------------------------------------------------------
{% endcomment %}

{% capture collect_module_defaults %}themes/{{site.template.name}}/procedures/layouts/collect_module_defaults.proc{% endcapture %}
{% capture collect_frontmatter_options %}themes/{{site.template.name}}/procedures/global/collect_frontmatter_options.proc{% endcapture %}
{% capture collect_page_options %}themes/{{site.template.name}}/procedures/global/collect_page_options.proc{% endcapture %}

{% comment %} process YML config data
================================================================================ {% endcomment %}

{% comment %} set config data
-------------------------------------------------------------------------------- {% endcomment %}

{% comment %} variables
-------------------------------------------------------------------------------- {% endcomment %}
{% assign placement                   = include.region %}
{% assign resource_globals            = include.global %}
{% assign resource_settings           = include.resource %}

{% assign dependency_check_cycle      = resource_globals.dependency_check_cycle %}
{% assign dependency_check_max_count  = resource_globals.dependency_check_timeout %}

{% assign depends                     = '' %}

{% comment %} helpers
-------------------------------------------------------------------------------- {% endcomment %}
{% capture adapter_prefix %}j1.adapter.{% endcapture %}
{% capture state_condition %}.getState() == 'finished'{% endcapture %}


{% comment %} main
-------------------------------------------------------------------------------- {% endcomment %}
{% if resource_settings.enabled == false %}
  <!-- [WARN   ] [j1.layout.module_writer.proc          ] [ {{resource_settings.id}} module detected as: {{ resource_settings.enabled }} ] -->
{% endif %}


{% if resource_settings.enabled and placement == 'body-footer' %}

  {% comment %} collect module dependency conditions (if any)
  ------------------------------------------------------------------------------ {% endcomment %}
  {% if resource_settings.dependencies %}
    <!-- [INFO   ] [j1.layout.module_writer.proc          ] [ dependencies detected: {{resource_settings.dependencies | split:','}} ] -->

    {% comment %} create dependency conditions (depends)
    ---------------------------------------------------------------------------- {% endcomment %}
    {% for dependency in resource_settings.dependencies %}
      {% capture depends %}{{depends|append:{{adapter_prefix}}{{dependency}}{{state_condition}}{% endcapture %}
      {% if forloop.last %}{% else %}{% capture depends %}{{depends|append:' && '}}{% endcapture %}{% endif %}
    {% endfor %}
  {% endif %}

  {% comment %} NOTE:
  Module default values collected by J1 Adapter
  ------------------------------------------------------------------------------ {% endcomment %}

  {% comment %} collect frontmatter|page options (page)
  ------------------------------------------------------------------------------ {% endcomment %}
  {% include {{collect_frontmatter_options}} module=resource_settings.id %}
  {% assign frontmatter_options = {{frontmatter_options}} %}

  {% include {{collect_page_options}} %}
  {% assign page_options = {{page_options}} %}

  {% assign layout_valid = false %}
  {% for layout in resource_settings.layout %}
    {% assign layout = layout|downcase %}
    {% if layout == page.layout or layout == "all" %} {% assign layout_valid = true %} {% endif %}
  {% endfor %}

  {% assign resource_valid = false %}
  {% if resource_settings.required == 'always' %}
    {% assign resource_valid = true %}
  {% else %}
    {% for resource in page.resources %}
      {% if resource == resource_settings.id %} {% assign resource_valid = true %}  {% endif %}
    {% endfor %}
  {% endif %}


  {% if layout_valid and resource_valid and resource_settings.enabled %}

    {% comment %} process all data keys
    ---------------------------------------------------------------------------- {% endcomment %}
    {% for data_var in resource_settings.data %}

      {% assign data_key       = data_var[0] %}
      {% assign data_value     = data_var[1] %}

      {% comment %}
      --------------------------------------------------------------------------
      WORKAROUND: and id != "j1_footer". For unclear reasons
      a UNKNOWN|NOT EXISTING resource  "j1_footer" is detected causing
      wrong adapter placements
      -------------------------------------------------------------------------- {% endcomment %}

      {% if data_key == 'init_function' and resource_settings.id != "j1_footer" %}

        <!-- [INFO   ] [j1.layout.module_writer.proc          ] [ place J1 adapter for resource: {{resource_settings.id}} ] -->
        <script>
          $(document).ready(function() {
            var logger = log4javascript.getLogger("j1.module_loader");

            {% if resource_settings.id == 'log4javascript' %}
              var start = moment();
              var finished = '';
              var elapsed = '';
              var log_text = '[' +start.format("HH:mm:ss.SSS")+ '] [INFO ] [j1.layout.module_writer.proc          ] [ {{resource_settings.comment|strip}} is being initialized ]';
              console.info(log_text);
            {% else %}
              var log_text = '{{resource_settings.comment|strip}} is being initialized';
              logger.info(log_text);
            {% endif %}


            {% comment %} place initializer|s
            -------------------------------------------------------------------- {% endcomment %}
            {% for init_function in data_value %}

              {% comment %} pass module specific frontmatter options
              ------------------------------------------------------------------ {% endcomment %}
              {% if frontmatter_options %}
                // [INFO   ] [j1.layout.module_writer.proc          ] [ pass module specific frontmatter options for: {{resource_settings.id}} ]
                {% capture frontmatter_options %}{{frontmatter_options}}, {"layout": "{{page.layout}}", "scrollbar": "{{page.scrollbar}}", "toc": "{{page.toc}}", "comments": "{{page.comments}}"}{% endcapture %}
                var settings = $.extend({}, {{frontmatter_options}});

                {% comment %} create resource_settings.dependencies (if any)
                ---------------------------------------------------------------- {% endcomment %}
                {% if resource_settings.dependencies %}
                  var interval_count = 0;
                  var dependencies_met_{{resource_settings.id}} = setInterval(function() {
                  var max_count      = {{dependency_check_max_count}};
                    interval_count += 1;
                    if ( {{depends}} ) {
                      {{init_function}}( settings );
                      logger.info('dependencies of module {{resource_settings.id}} met for: {{resource_settings.dependencies}}');
                      logger.debug('dependencies of module {{resource_settings.id}} met after: ' + interval_count * {{dependency_check_cycle}} + ' ms');
                      clearInterval(dependencies_met_{{resource_settings.id}});
                      }
                    if (interval_count > max_count) {
                      logger.warn('dependency check failed for module: {{resource_settings.id}}');
                      clearInterval(dependencies_met_{{resource_settings.id}});
                      logger.warn('run initializer {{resource_settings.id}} unchecked for: {{resource_settings.dependencies}}');
                      {{init_function}}(settings);
                    }
                  }, {{dependency_check_cycle}});
                {% else %}
                  {{init_function}}(settings);
                {% endif %}
              {% else %}
                {% comment %} no module specific frontmatter options
                ---------------------------------------------------------------- {% endcomment %}

                {% comment %} pass default settings
                ---------------------------------------------------------------- {% endcomment %}
                {% if resource_settings.pass_init_data %}

                  // [INFO   ] [j1.layout.module_writer.proc          ] [ pass init data for: {{resource_settings.id}} ]
                  {% capture settings %}{"layout": "{{page.layout}}", "scrollbar": "{{page.scrollbar}}", "toc": "{{page.toc}}", "comments": "{{page.comments}}"}{% endcapture %}
                  var settings = $.extend({}, {{settings}});

                  {% comment %} create resource_settings.dependencies (if any)
                  -------------------------------------------------------------- {% endcomment %}
                  {% if resource_settings.dependencies %}
                    // Initialize module if resource_settings.dependencies reached state 'finished'
                    var interval_count = 0;
                    var max_count      = {{dependency_check_max_count}};
                    var dependencies_met_{{resource_settings.id}} = setInterval(function() {
                      interval_count += 1;
                      if ( {{depends}} ) {
                        {{init_function}}(settings);
                        logger.info('dependencies of module {{resource_settings.id}} met for: {{resource_settings.dependencies}}');
                        logger.debug('dependencies of module {{resource_settings.id}} met after: ' + interval_count * {{dependency_check_cycle}} + ' ms');
                        clearInterval(dependencies_met_{{resource_settings.id}});
                        }
                      if (interval_count > max_count) {
                        logger.warn('dependency check failed for module: {{resource_settings.id}}');
                        clearInterval(dependencies_met_{{resource_settings.id}});
                        logger.warn('run initializer {{resource_settings.id}} unchecked for: {{resource_settings.dependencies}}');
                        {{init_function}}(settings);
                      }
                    }, {{dependency_check_cycle}});
                  {% else %}
                    {{init_function}}(settings);
                  {% endif %}
                {% else %}
                  {% comment %} no default settings
                  -------------------------------------------------------------- {% endcomment %}

                  {% comment %} create resource_settings.dependencies (if any)
                  -------------------------------------------------------------- {% endcomment %}
                  {% if resource_settings.dependencies %}
                    var interval_count = 0;
                    var max_count      = {{dependency_check_max_count}};
                    var dependencies_met_{{resource_settings.id}} = setInterval(function() {
                      interval_count += 1;
                      if ( {{depends}} ) {
                        {{init_function}}();
                        logger.info('dependencies of module {{resource_settings.id}} met for: {{resource_settings.dependencies}}');
                        logger.debug('dependencies of module {{resource_settings.id}} met after: ' + interval_count * {{dependency_check_cycle}} + ' ms');
                        clearInterval(dependencies_met_{{resource_settings.id}});
                        }
                      if (interval_count > max_count) {
                        logger.warn('dependency check failed for module: {{resource_settings.id}}');
                        clearInterval(dependencies_met_{{resource_settings.id}});
                        logger.warn('run initializer {{resource_settings.id}} unchecked for: {{resource_settings.dependencies}}');
                        {{init_function}}();
                      }
                    }, {{dependency_check_cycle}});
                  {% else %}
                    {{init_function}}();
                  {% endif %}
                {% endif %}
              {% endif %}
            {% endfor %}
        });
        </script>
      {% endif %}

    {% endfor %}

    {% comment %} END Process all data keys
    ---------------------------------------------------------------------------- {% endcomment %}
    <!-- [INFO   ] [j1.layout.module_writer.proc          ] [ placement for all data_keys finished ] -->
    <!-- [DEBUG  ] [j1.layout.module_writer.proc          ] [ reset all data_keys ] -->

    {% comment %} reset all data keys
    ----------------------------------------------------------------------------
    {% assign is_placed       = true %}
    {% assign name            = nil %}
    {% assign resource_settings.enabled         = nil %}
    {% assign resource_settings.id              = nil %}
    {% assign resource_settings.comment         = nil %}
    {% assign resource_settings.layout         = nil %}
    {% assign resource_settings.required        = nil %}
    {% assign resource_settings.pass_init_data  = nil %}
    {% assign resource_settings.dependencies    = nil %}
    {% assign depends         = nil %}
    {% assign resource_settings.data            = nil %}
    ---------------------------------------------------------------------------- {% endcomment %}
  {% endif %}
{% endif %}
