{% comment %}
 # -----------------------------------------------------------------------------
 # ~/_includes/themes/j1/procedures/layouts/module_writer.proc
 # Liquid PROCEDURE to write|place the HTML markup for Javascript init
 # scripts defined for a layout
 #
 # Product/Info:
 # https://jekyll.one
 #
 # Copyright (C) 2020 Juergen Adams
 #
 # J1 Template is licensed under the MIT License.
 # See: https://github.com/jekyll-one-org/J1 Template/blob/master/LICENSE
 # -----------------------------------------------------------------------------
 # Test data:
 #    liquid_var:  {{ liquid_var | debug }}
 # -----------------------------------------------------------------------------
{% endcomment %}

{% comment %} liquid procedures
-------------------------------------------------------------------------------- {% endcomment %}
{% include themes/{{site.template.name}}/procedures/global/set_base_vars_folders.proc %}

{% comment %} 
jadams, 2019-08-23: globals set via layouts/default.html (!!!)
NO need to load this again
--------------------------------------------------------------------------------
{% include themes/{{site.template.name}}/procedures/global/set_base_vars_folders.proc %}
--------------------------------------------------------------------------------
{% endcomment %}

{% capture collect_module_defaults %}themes/{{site.template.name}}/procedures/layouts/collect_module_defaults.proc{% endcapture %}
{% capture collect_frontmatter_options %}themes/{{site.template.name}}/procedures/global/collect_frontmatter_options.proc{% endcapture %}
{% capture collect_page_options %}themes/{{site.template.name}}/procedures/global/collect_page_options.proc{% endcapture %}

{% comment %} process YML config data
================================================================================ {% endcomment %}

{% comment %} Set config data
-------------------------------------------------------------------------------- {% endcomment %}
{% assign resources                   = data.resources %}
{% assign resource_globals            = resources.globals %}

{% comment %} variables
-------------------------------------------------------------------------------- {% endcomment %}
{% assign environment                 = site.environment %}
{% assign logger_config               = modules.j1_log4javascript %}
{% assign dependency_check_cycle      = resource_globals.dependency_check_cycle %}
{% assign dependency_check_max_count  = resource_globals.dependency_check_timeout %}

{% assign items                       = include.resources %}
{% assign placement                   = include.region %}

{% assign pass_init_data              = true %}
{% assign dependencies                = false %}
{% assign depends                     = '' %}

{% comment %} helpers
-------------------------------------------------------------------------------- {% endcomment %}
{% capture adapter_prefix %}j1.adapter.{% endcapture %}
{% capture state_condition %}.getState() == 'finished'{% endcapture %}


{% comment %} main
-------------------------------------------------------------------------------- {% endcomment %}
{% for resources in items %}
  {% for resource in resources %}

    {% for parameters in resource %}
      {% for parameter in parameters %}

        {% if parameter|is_type == 'array' %}

          {% assign key   = parameter[0] %}
          {% assign value = parameter[1] %}

          {% if key == 'enabled' %}         {% assign enabled         = value %} {% endif %}
          {% if key == 'id' %}              {% assign id              = value %} {% endif %}
          {% if key == 'comment' %}         {% assign comment         = value %} {% endif %}     
          {% if key == 'required' %}        {% assign required        = value %} {% endif %}
          {% if key == 'dependencies' %}    {% assign dependencies    = value %} {% endif %}
          {% if key == 'pass_init_data' %}  {% assign pass_init_data  = value %} {% endif %}
          {% if key == 'data' %}            {% assign data            = value %} {% endif %}

          {% if key == 'layout' and value|is_type == 'string' %} 
            {% assign layouts = value %} 
            layouts: {{layouts}}
          {% endif %}  

        {% endif %}

      {% endfor %}
    {% endfor %}

    {% if enabled == false %}
      <!-- [WARN   ] [j1.layout.module_writer.proc          ] [ {{id}} module detected as: {{ enabled }} ] -->
    {% endif %}

  
    {% if enabled and placement == 'body-footer' %}

      {% comment %} collect module dependency conditions (if any)
      -------------------------------------------------------------------------- {% endcomment %}
      {% if dependencies %}
        <!-- [INFO   ] [j1.layout.module_writer.proc          ] [ dependencies detected: {{dependencies | split:','}} ] -->
        {% comment %} create dependency conditions (depends)
        ------------------------------------------------------------------------ {% endcomment %}
        {% for dependency in dependencies %}
          {% capture depends %}{{depends|append:{{adapter_prefix}}{{dependency}}{{state_condition}}{% endcapture %}
          {% if forloop.last %}{% else %}{% capture depends %}{{depends|append:' && '}}{% endcapture %}{% endif %}
        {% endfor %}
      {% endif %}

      {% comment %} NOTE:
      Module default values collected by J1 Adapter
      -------------------------------------------------------------------------- {% endcomment %}

      {% comment %} collect frontmatter options (page)
      -------------------------------------------------------------------------- {% endcomment %}

      {% include {{collect_frontmatter_options}} module=id %}
      {% assign frontmatter_options = {{frontmatter_options}} %}

      {% include {{collect_page_options}} %}
      {% assign page_options = {{page_options}} %}

      {% assign layout_valid = false %}
      {% for layout in layouts %}
        {% assign layout = layout|downcase %}
        layout: {{layout}}
        {% if layout == page.layout or layout == "all" %} {% assign layout_valid = true %} {% endif %}
      {% endfor %}

      layout_valid: {{layout_valid}}

      {% assign resource_valid = false %}
      {% if required == 'always' %}
        {% assign resource_valid = true %}
      {% else %}
        {% for resource in page.resources %}
          {% if resource == id %} {% assign resource_valid = true %}  {% endif %}
        {% endfor %}
      {% endif %}


      {% if layout_valid and resource_valid and enabled %}

        {% comment %} process all data keys
        ------------------------------------------------------------------------ {% endcomment %}
        {% for data_var in data %}

          {% assign data_key       = data_var[0] %}
          {% assign data_value     = data_var[1] %}

          {% comment %} 
          ----------------------------------------------------------------------
          WORKAROUND: and id != "j1_footer". For unclear reasons
          a UNKNOWN|NOT EXISTING resource  "j1_footer" is detected causing
          wrong adapter placements
          ---------------------------------------------------------------------- {% endcomment %}

          {% if data_key == 'init_function' and id != "j1_footer" %}

            <!-- [INFO   ] [j1.layout.module_writer.proc          ] [ place J1 adapter for resource: {{id}} ] -->
            <script>
              $(document).ready(function() {
                // [INFO   ] [j1.layout.module_writer.proc          ] [ create logger for component "loader" ]
                var logger = log4javascript.getLogger("j1.module_loader");

                {% if environment == 'development' %}
                  {% if id == 'log4javascript' %}
                    // [INFO   ] [j1.layout.module_writer.proc          ] [ create module loader START message ]
                    var start = moment();
                    var finished = '';
                    var elapsed = '';
                    var log_text = "[" +start.format("HH:mm:ss.SSS")+ "] [INFO ] [j1.layout.module_writer.proc          ] [ {{comment | replace: 'Resources for', '' | strip }} being initialized ]"
                    console.info(log_text);
                  {% else %}
                    var log_text = "{{comment | replace: 'Resources for', '' | strip }} are being initialized"
                    logger.info(log_text);
                  {% endif %}
                {% endif %}

                {% comment %} place initializer|s
                ---------------------------------------------------------------- {% endcomment %}
                {% for init_function in data_value %}

                  {% comment %} pass module specific frontmatter options
                  -------------------------------------------------------------- {% endcomment %}
                  {% if frontmatter_options %}
                    // [INFO   ] [j1.layout.module_writer.proc          ] [ pass module specific frontmatter options for: {{id}} ]
                    {% capture frontmatter_options %}{{frontmatter_options}}, {"layout": "{{page.layout}}", "scrollbar": "{{page.scrollbar}}", "toc": "{{page.toc}}", "comments": "{{page.comments}}"}{% endcapture %}
                    var settings = $.extend({}, {{frontmatter_options}});

                    {% comment %} create dependencies (if any)
                    ------------------------------------------------------------ {% endcomment %}
                    {% if dependencies %}
                      var interval_count = 0;
                      var dependencies_met_{{id}} = setInterval(function() {
                      var max_count      = {{dependency_check_max_count}};
                        interval_count += 1;
                        if ( {{depends}} ) {
                          {{init_function}}( settings );
                          logger.info('dependencies of module {{id}} met for: {{dependencies}}');
                          logger.debug('dependencies of module {{id}} met after: ' + interval_count * {{dependency_check_cycle}} + ' ms');
                          clearInterval(dependencies_met_{{id}});
                          }
                        if (interval_count > max_count) {
                          logger.warn('dependency check failed for module: {{id}}');
                          clearInterval(dependencies_met_{{id}});
                          logger.warn('run initializer {{id}} unchecked for: {{dependencies}}');
                          {{init_function}}(settings);
                        }
                      }, {{dependency_check_cycle}});
                    {% else %}
                      {{init_function}}(settings);
                    {% endif %}
                  {% else %}
                    {% comment %} no module specific frontmatter options
                    ------------------------------------------------------------ {% endcomment %}

                    {% comment %} pass default settings
                    ------------------------------------------------------------ {% endcomment %}
                    {% if pass_init_data %}

                      // [INFO   ] [j1.layout.module_writer.proc          ] [ pass init data for: {{id}} ]
                      {% capture settings %}{"layout": "{{page.layout}}", "scrollbar": "{{page.scrollbar}}", "toc": "{{page.toc}}", "comments": "{{page.comments}}"}{% endcapture %}
                      var settings = $.extend({}, {{settings}});

                      {% comment %} create dependencies (if any)
                      ---------------------------------------------------------- {% endcomment %}
                      {% if dependencies %}
                        // Initialize module if dependencies reached state 'finished'
                        var interval_count = 0;
                        var max_count      = {{dependency_check_max_count}};
                        var dependencies_met_{{id}} = setInterval(function() {
                          interval_count += 1;
                          if ( {{depends}} ) {
                            {{init_function}}(settings);
                            logger.info('dependencies of module {{id}} met for: {{dependencies}}');
                            logger.debug('dependencies of module {{id}} met after: ' + interval_count * {{dependency_check_cycle}} + ' ms');
                            clearInterval(dependencies_met_{{id}});
                            }
                          if (interval_count > max_count) {
                            logger.warn('dependency check failed for module: {{id}}');
                            clearInterval(dependencies_met_{{id}});
                            logger.warn('run initializer {{id}} unchecked for: {{dependencies}}');
                            {{init_function}}(settings);
                          }
                        }, {{dependency_check_cycle}});
                      {% else %}
                        {{init_function}}(settings);
                      {% endif %}
                    {% else %}
                      {% comment %} no default settings
                      ---------------------------------------------------------- {% endcomment %}

                      {% comment %} create dependencies (if any)
                      ---------------------------------------------------------- {% endcomment %}
                      {% if dependencies %}
                        var interval_count = 0;
                        var max_count      = {{dependency_check_max_count}};
                        var dependencies_met_{{id}} = setInterval(function() {
                          interval_count += 1;
                          if ( {{depends}} ) {
                            {{init_function}}();
                            logger.info('dependencies of module {{id}} met for: {{dependencies}}');
                            logger.debug('dependencies of module {{id}} met after: ' + interval_count * {{dependency_check_cycle}} + ' ms');
                            clearInterval(dependencies_met_{{id}});
                            }
                          if (interval_count > max_count) {
                            logger.warn('dependency check failed for module: {{id}}');
                            clearInterval(dependencies_met_{{id}});
                            logger.warn('run initializer {{id}} unchecked for: {{dependencies}}');
                            {{init_function}}();
                          }
                        }, {{dependency_check_cycle}});
                      {% else %}
                        {{init_function}}();
                      {% endif %}
                    {% endif %}
                  {% endif %}
                {% endfor %}
            });
            </script>
          {% endif %}

        {% endfor %}

        {% comment %} END Process all data keys
        ------------------------------------------------------------------------ {% endcomment %}
        <!-- [INFO   ] [j1.layout.module_writer.proc          ] [ placement for all data_keys finished ] -->
        <!-- [DEBUG  ] [j1.layout.module_writer.proc          ] [ reset all data_keys ] -->
        {% assign is_placed       = true %}
        {% assign name            = nil %}
        {% assign enabled         = nil %}
        {% assign id              = nil %}
        {% assign comment         = nil %}
        {% assign layouts         = nil %}
        {% assign required        = nil %}
        {% assign pass_init_data  = nil %}
        {% assign dependencies    = nil %}
        {% assign depends         = nil %}
        {% assign data            = nil %}

      {% endif %}
    {% endif %}
  {% endfor %}
{% endfor %}
