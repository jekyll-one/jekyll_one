// ~/300_asciidoc_writers_guide/000_includes/documents/200_building_documents/
// Chapter document: 210_use_document_skeleton.asciidoc
// -----------------------------------------------------------------------------

[[document-skeleton]]
== The Document Skeleton

The *Asciidoc Document Skeleton* a helper for setting up a base file and
folder structure for *multi-chapter* AsciiDoc documents based on the Web site
generator _Jekyll_ and _J1 Template_, the base system creating a J1 Web site.

[NOTE]
====
.Converting the Skeleton

The Asciidoc Document Skeleton is fully *relocateable* and can be placed in
any subfolder of your Jekyll site for *HTML* output. For *PDF* output. A
single variable `BASE_PATH` has to be set for your environment.

See the batch helper files `a2p.bat` for _Windows_ or `a2p.sh` for the shell
script used on _Unix_ or _Linux_.
====

// lorem:sentences[5]

// lorem:sentences[2]


=== Install the Skeleton

From now on, you need to have the base software components _Jekyll_ and
_J1 Template_ in place for developing. If you haven't installed the softeware
already , see the *Tip Box* below.

[TIP]
====
Explain from where the tools can be downloaded.
====

To not intefere already existing projects, it might be an good idea to create
a new Web for the very first work on that. Nothing simpler like that.

* Open a command box and go for your WWW root folder (or any other directory you like)
* Create your site, change to the site's folders
* Run jekyll

[source, sh]
----
cd $WWW_ROOT
j1 generate doc_site
cd doc_site && j1serve
----

You'll see something like this (I did it on _Windows_):

[source, text, numbered, highlight='21-22', role="noclip"]
----
C:\Temp>j1 generate doc_site
Running bundle install in C:/Temp/doc_site...
           Bundler: Fetching gem metadata from https://rubygems.org/...........
           Bundler: Fetching gem metadata from https://rubygems.org/..
           Bundler: Resolving dependencies....
           Bundler: Using rake 12.3.0
           ...
           Bundler: Bundle complete! 26 Gemfile dependencies, 89 gems now installed.
           Bundler: Use `bundle info [gemname]` to see where a bundled gem is installed.
Generate jekyll site installed in C:/Temp/doc_site.

Configuration file: C:/Temp/doc_site/_config.yml
            Source: .
       Destination: _site
 Incremental build: enabled
      Generating...
         AutoPages: Disabled/Not configured in site.config.
        Pagination: Complete, processed 1 pagination page(s)
                    done in 24.679 seconds.
 Auto-regeneration: enabled for '.'
    Server address: http://localhost:40000
  Server running... press ctrl-c to stop.
----

After 30 seconds I'm done. Open a browser pointing to the new site *doc_site*
displayed in site-creation output (look for `Server address` at line *21*).

/////
.J1 Starter Web
image::{images-dir}/210_use_document_skeleton/new_doc_site_for_skeleton.800x600.png[J1 Starter Web, 800]
/////

Run your favourite editor and open the Web site folder. Im my case, I created
the site under *C:/Temp/doc_site/*. I personally using for _Atom_ to edit my
Jekyll sites. A quite good one, created by _Google_ and and many, many people
from the community adding a huge number of addon's (so-called Packages). To
read and check my AsciiDoc code better, I installed a syntax highlightning
package.

For that reason, if a screenshot is placed to make things more visual, you'll
see the Atom editor. But as I said, use what you want, use what you have ever
used; go for an editor you prefer. Using a tool you like supports the *Flow*.

Extract the skeleton from the zip file to the *pages* folder of *doc_site*.
That's the home for classic web pages for a Jekyll site. The first file to
inspect should be a so-called *Master Document* the AsciiDoc file
*document_title.adoc*.

/////
ifdef::backend-html5[]
.Master Document for HTML conversion
lightbox::atom_view_skeleton[ 800, {data-atom-view-skeleton} ]
endif::[]

ifdef::backend-pdf[]
.Master Document for HTML conversion
image::{images-dir}/210_use_document_skeleton/atom_view_skeleton.800x600.png[Master Document for HTML conversion, 800]
endif::[]
/////

As you have copied the skeleton down to the *pages* folder into the (running)
Jekyll site, the Web was *automatically regenerated* (see the messages in the
termimal below the AsciiDoc source code). That's one of the magic of Jekyll:
automatic, incremental rebuild of what has been changed.

In other words, the skeleton should be converted to a HTML page ready for
viewing. To make this step a bit more challenging, this document should be
accessible using the *menu system* of you new doc site. Not that hard as it
is prepared to do so. I'm an alone, hard woring author but I think I know
what you need for good results.

=== Configure the Menu

_J1 Template_ comes with a menu manager included. This nice guy is working in
the background -- waiting for something to do for us. Give it a try.

The reason why an editor is so important is the fact, that all, from what a
Jekyll site is made, are simple (text) files. IT related people will love this
from the first second on. I'm unsure what the feelings from authors are, haven't
worked for ages as a DevOps specialist or a programmer. If you like, let it me
know on my blog {uri-jekyll-one-home}[Jekyll One].

An editor is a quiet place, no horrible graphical interfaces, no need to
stumble back and forth to find what's needed. No creasy little helpers
bothering you. There is nothing disturbing, that may interrupt your *Flow*.
You need to explore some simple menu entries, learn some handy shortcuts.
It is easier to type `CTRL + s` to save your document rather than searching
for the *Save Button* elswhere.

/////
ifdef::backend-html5[]
.Asciidoc Document Skeleton
lightbox::document_skeleton[ 800, {data-atom-edit-navigator-menu} ]
endif::[]

ifdef::backend-pdf[]
.Edit|Modify the Menu Manager configuration
image::{images-dir}/210_use_document_skeleton/atom_edit_navigator_menu.800x600.png[Edit|Modify the Menu Manager configuration, 800]
endif::[]
/////

As shown in the screenshot above, open the topmost folder *&#95;_data*. The
*modules* folder contains all the configuration for the modules that comes
with _J1 Template_. The config for the menu (bar) you find with the file
*j1_navigator_menu.yml*.

The entry under *Start* is prepared already. Uncomment this entry by removing
the trailing hashes (`#`) like so:

[source, yaml]
----
    - title:                            Document Skeleton
      href:                             /pages/_base_folder_/document_title/
      icon:                             file-tree
----

After saving the file, Jekyll refreshes the site and your first work on the
menu system has been done! Now, you can open the pages of te coverted skeleton
document from the menu bar under *Start* by the entry *Document Skeleton*.

[role="mb-4"]
Well, done!

/////
ifdef::backend-html5[]
.Asciidoc Document Skeleton
lightbox::document_skeleton[ 800, {data-document-skeleton} ]
endif::[]

ifdef::backend-pdf[]
.Asciidoc Document Skeleton
image::{images-dir}/200_creating_documents/document_skeleton.800x600.png[Asciidoc Document Skeleton, 800]
endif::[]
/////

// lorem:sentences[5]

[role="mt-4, mb-3"]
[TIP]
====
You did a lot of things already over the time working on that tutorial. I've
no idea how long. That is the author's destiny. I checked my PDF output and
more than 30 pages to read up to this point. Time to do some more but mind-less
work. Explore a bit the source of the skeleton. Check the outcome, what has
been converted. Go for what the children do - check it out, open minded.
You'll interprete something wrong, you can't catch and cover all Y's.

Don't care. Play around -- a time.
====

A lot of work is done. That's a matter of fact. A skeleton is nice, but far
away from what you want. To understand a skeleton as a starting point, you
need to unterstaand the structure. I do not leave you alone by "Have fun".

=== Whats' next

Continue by the follwing chapter. Learn what that fairly dead thing can do for
a living AsciiDoc document. You'll see: no magic bit a tricky thing.
