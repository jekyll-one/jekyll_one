First of all, some preparation steps are needed to step into the world of
static websites and Jekyll. This tutorial is focussing mainly on _Windows_.
For web servers, Windows for the OS is *not* the best choice for several
reasons. But Windows is quite popular for Desktop Computers, the PC at home.

[NOTE]
====
_Jekyll_, _J1 Template_, and all Tools needed are so-called *multi-platform*.
That means you can use J1 on all popular platforms like Windows, Unix/Linux,
or MacOS. This tutorial is focussing mainly on the Windows OS. For good reasons.
Windows has a domain on Desktop Computers. Most PCs used at home for a Desktop
system are running under the operating system (OS) Windows. Today
mostly Windows 10.
====

We expect that for the *testing platform*, the Computer used for learning
Jekyll and J1 a Windows-PC is preferred by most of our readers. _Windows_
is a proprietary platform - far away from *open* and *OpenSource*. Sounds
bad first place, but it is *not*.

The Windows OS does not provide any of the tools needed to create a Jekyll
Web. That is different for Linux or other modern Unix OS (short: *nix) in
general of today. Many tools are already installed on ***nix** based systems
or available as (native) installation packages.

Why a hell is Windows a good choice for learning Jekyll and J1? That is
because you need to start from the scratch! It is a bit more work upfront,
sure. In the very end, you'll learn much more about the world of OpenSource
*and* what is Jekyll, J1, and Web Development all about.

All the software needed for this tutorial, and Jekyll/J1 in general, is
available for the Windows OS for free. Multiple companies, thousands and
thousands of private persons and projects contribute by their tools and
software freely available to all of us on the Internet. Thanks a lot
to all of them.

Using Windows for a web project is a sort of an oxymoron. A challenge
sometimes. Anyway:

*Let's start and have fun!*

== The Hardware needed

For all Desktop Computers, a modern hardware is expected like so:

* a multi-core CPU, >= Intel *i5* or AMD Ryzen *5*
* 8 GB of RAM, 3-4GB free RAM available
* an Internet connection, bandwidth >= 16k (simple DSL)
* a modern Monitor, Display size >= 21 inch

To develop a website, some power for the hardware is essential to be able to
work fluidly. It is not fun to wait on the processing to finish a simple
change on the web for ages.

To run multiple programs in different windows on a screen in parallel, a
modern monitor is needed. It is possible to use a Laptop at 15 inches for
the display, but expect difficulties.

== The Software needed

In general, J1 is supported on all current **x64**-based OS:

* Windows 10, build >= 1903
* Windows WSL 2
* Linux, kernel version >= 4.15 (e.g. Ubuntu  18.x LTS)
* OSX, version >= 10.10.5 (Yosemite)

WARNING: Note that 32-bit versions (x32) are generally *NOT* supported for
*all platforms* supported.

NOTE: For the Windows platform, a current Windows 10 is expected. A Windows 7 OS
will work, but is *not* tested.

The base software to run Jekyll and J1 is:

NodeJS::
NodeJS is an open-source, cross-platform, back-end JavaScript runtime
environment that runs on the Chrome V8 engine. NodeJS is used to create
(and control) Server- and Desktop-Applications based on JavaScript running
on the Client-OS (e.g. Windows), *not* in a browser. For J1, NodeJS is
mainly used to run a J1 Template-based *project*.

Ruby::
Ruby is a dynamic, open-source programming language with a focus on simplicity
and productivity. Jekyll, the core engine to create websites using J1, is
written in Ruby. J1 Template is using Ruby as well to e.g implement (build-in)
plugins.

The image below describes the general relationship of _NodeJS_ and _Ruby_
to work with J1 Template creating websites. From a top-level view, the
development toolset is used in a row as an *Input-Processing-Output*
scheme.

.Flow to create a website using J1
lightbox::kickstart-wiad--tools-flow[ 800, {data-kickstart-wiad--tools-flow} ]

callout::1["Input, commands to control a J1 project"]
callout::2["Processing, site builders Jekyll and J1"]
callout::3["Output, the website created", ml-2 mb-3]

If _NodeJS_ or _Ruby_ is not already installed with your PC, continue on the
following sections. You'll find help about installing and check the toolset.
If you're unsure if or what versions of _Ruby_ and/or _NodeJS_ is already
installed with your system, run a command shell (cmd.exe) and check the
versions installed:

[source, msshell]
----
ruby --version && node --version
----

.Example of installed tool versions
lightbox::kickstart-wiad--tool-versions[ 800, {data-kickstart-wiad--tool-versions} ]

The required tool versions are:

----
Ruby:   >= 2.6.x, < 3.x  <1>
NodeJS: >= 12.x, < 14.x  <2>
----

<1> The latest version 3.x of the Ruby language is *not* supported by J1
<2> NodeJS version 14.x is *not* supported by J1

=== What versions should be installed?

All software used by J1 Template is in current, but well-known stable and
secure versions. It is not *always* needed to use the *very latest* versions,
especially for the development toolset. The development environment must
meet the requirements for *all* components used for a project.

NOTE: Many private persons or smaller organizations develop OpenSource software.
smaller organizations. A lot of OpenSource software is used by Jekyll
and J1 under the hood. Great software, but quite often limited in terms of
the development tool versions. New versions of development tools require
changes for the code and already existing OpenSource software hasn't
implemented the needed changes for the latest versions yet. In the very end,
those software components will issue warnings, fail or cause other issues
that make a product unusable overall.

=== Where to install the toolset?

The development system, the toolset, is a platform-**specific** compilation.
The supported programming languages are **multi**-platform, the development
tools are *not*! All tools to be installed on _Windows_ are build for this
platform to make it possible to run, for example, Ruby-based programs on
_Windows_.

Most of the OpenSource software today has its *roots* in Linux. In relation
to _Windows_, **Linux**-based platforms use a *different* scheme for the
*naming* of directories and paths.

NOTE: A more detailed discussion for the *naming* schemes of directories and
paths for several OS can be found on
link:{wikipedia-en--filename}[Wikipedia, {browser-window--new}].

On _Windows_, directories and paths typically contain whitespaces (blanks).
This is much closer to a written human language but can cause some
difficulties. The default folder for installing NodeJS on _Windows_ is:

.Install path on _Windows (NodeJS)
----
C:\Program Files\nodejs
----

On _Linux_, directories and paths *can* contain whitespaces as well, but
most files and folders do not use blanks for a path (or a filename):

.Install path on _Linux_ (NodeJS)
----
/home/user_name/node/v12.22.0
----

I recommend installing only *native* _Windows_ Applications under
*C:\Program Files*. The development toolset is built for _Windows_, but
for, sure they aren't *native* to _Windows_. None of the tools
having a Graphical User Interface (GUI). They are command-line tools running
on a shell, not in a GUI.

It is recommended to use an installation folder without *whitespaces*. To make
the toolset available for all users on Windows, simply install the tools under
the root of the (first) hard disk C: like so:

----
C:\DevTools
----

Such will prevent you from having difficulties managing folder names that
contain whitespaces, and the installation path is quite simple and easy
to remember.

NOTE: You can always go for the *default* installation paths of a product
on _Windows_. But all examples for this (and other) tutorials will use the
recommended path for the J1 Template, *not* the default.

If you decided to go for J1-Template recommended  installation paths, create
the root folder for the dev tools first. Open a command shell (cmd.exe) and
run:

[source, msshell]
----
md C:\DevTools
----

All tools used for the development environment will go to this folder.

=== What user can install software on _Windows_?

To install software on _Windows_, you’ll need administrative user rights
to do so. That means only an *elevated* user account can install applications.
That is quite the same for all OS, including Linux.

If you start an installation using an *Installer* provided for a product,
this is done using the *User Access Control* (UAC) mechanism of _Windows_
under the hood. To manage applications, for example, creating an install
path at command-line (cmd.exe), you'll need an *administrative* shell
as well.

CAUTION: Never change the security settings of *any* OS without the proper
knowledge of what you’re doing. For the Windows OS, the pretty same and much
more critical for a Desktop OS used by non-technical people. For most user
activities on the Windows OS, using elevated system rights is *not* needed!

=== How to run and use an elevated shell?

From time to time, it is *needed* to go for elevated system rights. To work
with J1 Template, this is required for very seldom operations only and can be
done from the command-line. If your *UAC* settings on _Windows_ are correctly
configured or *not* changed, all commands required are safe and won't touch
your system security by harmful side effects.

The easiest way to run an elevated shell is to create a shortcut for the
shell *cmd.exe* on your Desktop. Give that shortcut administrative user
rights to execute the command shell *elevated*.


. First, do a **right**-click with the mouse on your *Desktop*. A dialog
  pop-up to create the new link.
. For the first dialog window, give *cmd* for the program to be *linked*.
. For the second dialog window, name the link *cmd (elevated*).
. If the is link is created, configure the link *properties* to run
  cmd.exe *elevated*.

See the steps in a row from the screen-shots below.

.Run a create link dialog
lightbox::windows--create-a-link-1[ 600, {data-windows--create-a-link-1} ]

.Type in the command to be linked
lightbox::windows--create-a-link-2[ 600, {data-windows--create-a-link-2} ]

.Name the link
lightbox::windows--create-a-link-3[ 600, {data-windows--create-a-link-3} ]

.Configure the link properties to run elevated
lightbox::windows--create-a-link-4[ 600, {data-windows--create-a-link-4} ]

From now on, an elevated command shell can be started using this *link*
to *cmd.exe*. If this shortcut is clicked on, a UAC control dialog
is issued to accept to run cmd.exe *elevated*.

.UAC control dialog
lightbox::windows--uac-control[ 400, {data-windows--uac-control} ]

Well done! All that is needed to be prepared for installing the development
environment is done. Now, the toolset is to be installed!

=== Installing _NodeJS_

The recommended path for *J1* to install NodeJS is:

----
C:\DevTools\NodeJS  <1>
----
<1> Option *1*

or a path reflecting the specific *version* (v12.22 for example) to be
installed like so:

----
C:\DevTools\NodeJS-v12.22.0-win-x64  <1>
----
<1> Option *2*, a folder link (junction) *NodeJS* pointing to the install
    folder should be created

==== Creating the installation path

To prepare the installation, create the needed installation path *first*.
Run an *elevated* command shell to create the directory for *NodeJS* needed.

If you decided on  option *1*:

[source, msshell]
----
cd C:\DevTools && md NodeJS
----

For option *2*:

[source, msshell]
----
cd C:\DevTools && md NodeJS-v12.22.0-win-x64 && mklink /J NodeJS NodeJS-v12.22.0-win-x64
----

NOTE: In both cases, the install path is *C:\DevTools\NodeJS*. For option *2*,
additionally, a *junction*, a *link* for folders, has been created.

If you open an *explorer* for the directory *C:\DevTools*, you'll find the
install folder for *NodeJS* created.

.Install folder for NodeJS
lightbox::windows--explorer-folder-nodejs[ 600, {data-windows--explorer-folder-nodejs} ]

If you decided to go for option *2*, the folder link (junction) is available
and pointing to the directory reflecting the NodeJS *version* to be installed.
Next, the installer for _NodeJS_ is to be downloaded. The recommended  version
(latest v12) for J1 is available from the link:

mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{nodejs--download-v12-22-win-x64-msi}[Download NodeJS v12.22.0 for Windows]

or for all available NodeJS versions from:

mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{nodejs--downloads}[Download page for NodeJS (all versions/platforms), {browser-window--new}]

==== Run the NodeJS installer

If you decided to go for the recommended  version, a browser window is opened,
and the download starts immediately. The installer *node-v12.22.0-x64.msi*
will be downloaded to the default location *Download* for _Windows_. If the
download is finished, you can start the installer directly from your browser
or the download folder *Download*. See the installing steps from the
screenshots below.

[CAUTION]
====
In step *5*, you're requested to install the *toolset* for *NodeJS*. These
tools are *not* required for Jekyll or J1 and should *not* be installed to
reduce the installation's complexity.

The toolset for *NodeJS* contains the development kit (DevKit) to build
platform-specific Javascript modules (libraries). On _Windows_, this is
a pretty complex process to install. It should be done if needed, in a
separate step outside the installation of NodeJS.

*Chocolatey* is a package manager to manage and automate installations of
OpenSource packages/applications on _Windows_. That might be an option if
many software packages from this world need to be installed on _Windows_
quite often.
====

.Welcome message
lightbox::nodejs--installer-dialog-1[ 600, {data-nodejs--installer-dialog-1} ]

.License agreement
lightbox::nodejs--installer-dialog-2[ 600, {data-nodejs--installer-dialog-2} ]

.Destination folder
lightbox::nodejs--installer-dialog-3[ 600, {data-nodejs--installer-dialog-3} ]

.Package selection
lightbox::nodejs--installer-dialog-4[ 600, {data-nodejs--installer-dialog-4} ]

.Additional tools
lightbox::nodejs--installer-dialog-5[ 600, {data-nodejs--installer-dialog-5} ]

.Install dialog
lightbox::nodejs--installer-dialog-6[ 600, {data-nodejs--installer-dialog-6} ]

.UAC dialog to finally install NodeJS
lightbox::nodejs--installer-dialog-7[ 600, {data-nodejs--installer-dialog-7} ]

.Completion message
lightbox::nodejs--installer-dialog-8[ 600, {data-nodejs--installer-dialog-8} ]

.Installed files for NodeJS
lightbox::nodejs--installer-dialog-9[ 600, {data-nodejs--installer-dialog-9} ]

=== Installing _Ruby_

The procedure to install _Ruby_ is quite similar to install _NodeJS_. Because
the steps are quite the same, the description is a bit more compact, skipping
some parts you already know to not bother you by the same again.

The recommended path for *J1* to install _Ruby_ is:

----
C:\DevTools\Ruby
----

or a path reflecting the specific *version* (v72 for example) to be
installed like so:

----
C:\DevTools\Ruby27-x64
----

==== Creating the installation path

To prepare the installation, create the needed installation path *first*.
Run an *elevated* command shell to create the directory for *Ruby*.

[source, msshell]
----
cd C:\DevTools && md Ruby
----

or

[source, msshell]
----
cd C:\DevTools && md Ruby27-x64 && mklink /J Ruby Ruby27-x64
----

Next, the installer for _Ruby_ is to be downloaded. The recommended  version
(latest Ruby v2) for J1 is available from the link:

mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{ruby--download-v27-devkit}[Download Ruby v27 the DevKit included]

or for all available Ruby versions from:

mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{rubyinstaller--home}[Download page for Ruby on _Windows_ (all versions), {browser-window--new}]

[CAUTION]
====
The development kit (DevKit) to build platform-specific Ruby modules
(libraries) is *needed* for _Jekyll_ and _J1_. This is a quite *simple*
process to install, with no headache as for _NodeJS_.
====

==== Run the installer

If you decided to go for the recommended  version, a browser window is opened,
and the download starts immediately. The installer
*rubyinstaller-devkit-2.7.2-1-x64.exe* will be downloaded to the default
location *Download* for _Windows_. If the download is finished, you can start
the installer directly from your browser or the download folder *Download*.
See *selected* installing steps from the screenshots below.

NOTE: For the last step of the _Ruby_ installation, use option *3* to install
the full set of *DevKit* applications for _Windows_. To finish this install
step, simply press the **Return**-key.

.Destination folder
lightbox::ruby--installer-dialog-1[ 600, {data-ruby--installer-dialog-1} ]

.Package selection
lightbox::ruby--installer-dialog-2[ 600, {data-ruby--installer-dialog-2} ]

.Install the DevKit
lightbox::ruby--installer-dialog-3[ 600, {data-ruby--installer-dialog-3} ]

Yeah, you finished the heavy part of setting up your development environment
to run J1! From now on, no more cumbersome installations are needed. Now, you
can smoothly step into the world of Jekyll using J1 doing this the simple way.

*Welcome!*

=== Installing _J1 Template_

The Template system *J1* is a _Ruby_ *GEM*, a so-called **GEM**-based
template for _Jekyll_.

NOTE: _Ruby_ *GEMs*, called *Rubies* sometimes, are libraries - or more
general *modules*, to extend the _Ruby_ language. All programming languages
support a concept to extend the *base* functionality by modules (libraries).
That is the same for _Ruby_. Besides *system* GEMs (libraries), *user-defined*
modules are playing an important role in programming applications. Thousands
of people around the world support the _Ruby_ language by *user-defined*
modules be (re-)used. No wonder _Jekyll_ and *J1* are using a bunch of those
*GEMs*: *to not re-invent a wheel*!

In general, the tool to install _Ruby_ GEMs (modules) is the command *gem*, the
package manager utility for _Ruby_. All modern programming languages support a
*marketplace* to get available *user-defined modules* from the Internet. For
_Ruby_, this marketplace is
link:{rubygems--home}[RubyGems, {browser-window--new}].

Installing GEMs (modules/libraries) for _Ruby_ raises an important question
to be answered upfront the installation: *where* to install libraries used to
extend a programming language? This open question is quite the same for all
programming languages, not specific for _Ruby_.

You’ve experienced that installing a programming language will need *elevated*
user rights (on  _Windows_: think about UAC) to do so. The reason is, this
installation provides access for *all* users of a system. Vice versa, this
raises the questions what libraries:

* are need for *all* users
* are needed for a specific *user* or *application*

*J1* and _Jekyll_ are great software, no doubt. But for sure, they are used
typically in a *user* context, *not* system-wide. For this reason, *J1*
should be installed for a *user*, not globally (system-wide) for the _Ruby_
language.

CAUTION: Installing _Ruby_ GEMs *system-wide* will *always* need *elevated*
user rights. This is annoying, but prevents a system-wide installation to
be *polluted* by software components not needed in *general*.

Installing *J1* can be done in a user context (*userized*), but system-wide as
well. In most cases, an installation in a *user context* is the better choice
to install _Ruby_ GEMs for _Jekyll_ and *J1*.

.Installation options for J1
----
gem install j1-template --user-install <1>
gem install j1-template <2>
----
<1> Option *1*, installing *userized* (default)
<2> Option *2*, installing *system-wide*

==== Installing _J1 Template_ userized

It is highly recommended to install J1 and Jekyll userized. This tutorial
is *based* on an *userized* installation. A *system-wide* installation will
need some *additional* steps in terms of configuring *J1* what is *not*
discussed. In other words: *expect* difficulties to manage Jekyll and J1 if
you decided to install differently.

To install J1, an elevated shell is *not* needed. To run the installation,
close the administrative shell and open an unprivileged shell by running
*cmd.exe*.

.Install J1 *userized*
[source, msshell]
----
gem install j1-template --user-install --no-document <1>
----
<1> Installing the full *documentation* is *not* needed for the *J1*
    runtime-system to *develop* websites

Installing the *J1-Template* GEM will take a while. A significant number of
modules (about 60) used by _Jekyll_ and *J1* will be download, installed,
and configured.

A summary of the responses while installing is shown below:

----
WARNING:  You don't have c:\users\<user_name>\.gem\ruby\2.7.0\bin in your PATH,
          gem executables will not run.

Fetching public_suffix-4.0.6.gem
...
Successfully installed bump-0.10.0
60 gems installed
----

NOTE: Downloading and installing the *entire* chain of depending GEMs are
only done *once*.


==== Adjust your environment

An important *notice* in your command shell while installing J1 was:

----
WARNING:  You don't have c:\users\<user_name>\.gem\ruby\2.7.0\bin in your PATH,
          gem executables will not run.
----

NOTE: On _Windows_, a set of general environment variables are set automatically
for you: *%HOMEDRIVE* and *%HOMEPATH%*, for example. These variables are used
to manage the access to applications by users.

A *userized* installation will install all GEMs with the user's *home*
directory. For full access to all resources of your *userized* GEMs, your
*environment* needs to be extended to the installation for the GEMs binary
path:

----
%HOMEDRIVE%%HOMEPATH%\.gem\ruby\2.7.0\bin <1>
----
<1> It is *expected* that *Ruby v27* has been installed. If version *v26* was
    used, the path is *%HOMEDRIVE%%HOMEPATH%\.gem\ruby\2.6.0\bin*

NOTE: The module concept of _Ruby_ is different in comparison to other
programming languages. For _Ruby_, a GEM *can* contain command-line
interfaces (CLI, commands) to access higher-level functionality. Jekyll and J1
use that to provide the CLI commands jekyll and j1.

To adjust your environment, to have full access to *userized* GEMs, add the
installation (binary) path to your environment. To adapt your environment,
run in a command shell:

.Open the *System Properties* dialog on _Windows_
[source, msshell]
----
C:\Windows\System32\SystemPropertiesAdvanced.exe
----

and add a *new* variable:

[source, msshell]
----
%HOMEDRIVE%%HOMEPATH%\.gem\ruby\2.7.0\bin
----

to your environment. See all steps summarized by the following screenshots:

.System Properties dialog
lightbox::windows--system-properties-dialog-1[ 400, {data-windows--system-properties-dialog-1} ]

.Environment Variables
lightbox::windows--system-properties-dialog-2[ 400, {data-windows--system-properties-dialog-2} ]

.Add new environment variable for userized GEMs
lightbox::windows--system-properties-dialog-3[ 400, {data-windows--system-properties-dialog-3} ]


==== Check your environment

If you have extended your environment for the userized *GEM path*, run:

.CLI commands for the Jekyll and J1
[source, msshell]
----
where jekyll && where j1
----

To list the versions installed, the command below can be used:

.Version information
[source, msshell]
----
jekyll --version && j1 --version
----

The current versions (of April 2021) are:
----
jekyll 4.2.0
j1 2021.1.0
----

What a procedure! Yes, sure. And most of you haven’t expected that - guessed.
See it as a piece of advice: installing the software you’ve never seen before
or installed on an unknown platform, it makes sense to know what needs to be
done in more detail. And it is required to *verify* if the installation was
*successful* and gives results for their (installation) locations respectively
the versions as *expected*.

== Installing an Development Editor

Creating websites using J1, a good source code editor is needed. If you are
using a code editor already, you can skip this section. Go for your favorite
editor.

If you haven't used a source code editor, two of them can *recommend*. Both
are Open-Source-Software, can be used for *free*:

* Atom Editor
* Visual Studio (VS) Code Editor

VS Code Editor is well-known from the world of _Windows_ development (Visual
Studio) provided by Microsoft, but independend from a VS development
environment. Atom is a free and multi-platform editor, originally developed
by _Github_ (but owned today by Microsoft).

*VS Code Editor* is a multi-platform, well-known  editor for _Windows_
development provided by _Microsoft_ but independent from a _Microsoft_
development environment (Visual Studio).

*Atom* is a free and multi-platform editor, initially developed by _Github_
(but owned today by Microsoft).

Both editors are using *Electron* as a base and are comparable by their
features. VS Code Editor is closer to the _Windows_ world, Atom closer to
the world of OpenSource.

A source code editor is a crucial tool but should meet what developers like
to use. But this depends on what is preferred, what the developer support at
its best. Therefore what editor should be used cannot be answered in general.
It depends on personal preferences rather than on the features an editor
provides.

It is up to you what code editor to use. Try the editors available on the
market and decide what editor fits your needs. Find the download page for
*Atom* and *VS Code* below.

=== Downloads

mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{atom-editor--home}[Download Atom Code Editor, {browser-window--new}] +
mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{vs-code-editor--home}[Download VS Code Editor, {browser-window--new}]
