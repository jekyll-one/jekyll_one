*Web in a Day* is the first in a series of tutorials to create modern
websites using Jekyll and J1. This Kickstarter focuses on Jekyll's basics
and the J1 Template system, which all people should know for a fast and
successful way of creating a modern static website using Jekyll and J1.

It is highly recommended to read and work on this tutorial by everyone.
Independently from what level of knowledge they begin. Jekyll is quite
different in comparison to classic Content Management Systems (CMS) like
_Joomla_, _WordPress_, or _Drupal_.

We recommend reading and work on this tutorial by everyone. Independently
from what level of knowledge they begin. Jekyll is quite different compared
to classic Content Management Systems (CMS) like _Joomla_, _WordPress_,
or _Drupal_.

*No surprise: Jekyll and J1 are different as well*.

It sounds much, spending a whole day to get Jekyll to know - yes, it's much.
You'll find a lot of Blog articles like *Jekyll in 15 minutes* on the Internet.
But what can be *learned* in 15 minutes? Most of these blogs are intended to
help install Jekyll and get the first steps managed out of the box, to be fair.
If you run Jekyll out of the box, the resulting website (from the build-in
theme scaffold minima) might somewhat frustrating. You'll get a pretty simple
site based on Jekyll's theme *minima*.

To not waste time, get through the tutorial and find out what is the
*Jekyll Way*. And if this is the way you want to go. Have a good time, a good
day learning Jekyll, learning how to use Jekyll and J1 for your new website.


== What is a static site?

A static site serves the content straight to the user as it's already prepared
(rendered) on the webserver (see conum:3[] below).

.Accessing scheme for a static web
lightbox::kickstart-wiad--static-web-access[ 800, {data-kickstart-wiad--static-web-access} ]

callout::1["Web Browser"]
callout::2["Web Server"]
callout::3["Prepared (static) content", ml-2 mb-3]

// NOTE: The static content conum:3[] is generated (prepared) by Jekyll.

A static website uses already rendered content to serve *pre-built* web pages
to a web browser, in contrast to *dynamic sites* that work by *rendering* each
and every webpage requested *at the time* of the *request*.

.Accessing scheme for a dynamic web
lightbox::kickstart-wiad--dynamic-web-access[ 800, {data-kickstart-wiad--dynamic-web-access} ]

callout::1["Web Browser"]
callout::2["Web Server"]
callout::3["Rendering Engine (e.g. PHP-based)"]
callout::4["Database (e.g. MySQL, Postgres)"]
callout::5["Static files like images, videos, JS- and CSS files", ml-2 mb-3]

From the access schema shown above, it's obvious that static websites are
incredibly simple. For this - and other good reasons - in the last few years,
static sites have greatly increased in popularity.

This increase in using static webs is primarily due to the availability of an
increasing number of excellent developing tools for those webs. And not least,
a stronger desire among businesses to optimize website performance and security
beyond the limits of a database-driven CMS-based site.

=== What's different?

To make it simple, a dynamic website uses rendering system-based databases
and a scripting engine like PHP (rendering engine) to generate the content
of a page when a user requests it.

Static sites can be written almost exclusively in HTML and serve a fixed set
of data that renders the same for every site visitor. Static sites uses
pre-built HTML, CSS, and JavaScript files to a web browser. Dynamic sites
operate in a completely different way by leveraging HTML and CSS as well as
server-side scripting languages like PHP to build webpages on the fly and serve
different content to each site visitor.

=== Why use a static site?

What are the advantages of a static website over a dynamic site?
You may be wondering. *Why should I build a static site when I could do the
same by WordPress*? Well, having a database, which always requires a complex
rendering system for dynamic pages, implies a lot of downsides. Here come the
main advantages of using a static site over a dynamic.

.SEO measures (Google Lighthouse) of a J1 Starter Web at Github Pages (jekyll-one-org.github.io)
lightbox::kickstart-wiad--seo-results-gh-pages[ 800, {data-kickstart-wiad--seo-results-gh-pages} ]

Performance::
*The better performance and a crazy fast load time*.
One of the main advantages of using a static site is the fact that
it is crazy fast to load. Indeed, when the user requests a page, there is
no need to request a database and various files to generate the
page itself as all the content is already placed in a one and only file:
an HTML one. That’s why by using a static site, you will get a boost in
your loading time that will provide a great user experience for the
internauts. Moreover, we know that more and more people are surfing the
web using their smartphones with, sometimes, poor internet connections.
That’s why having fast loading times will participate in making your
website mobile-friendly.

Security::
*Having a static website: say goodbye to hacking and security issues*.
To not get tired of getting notifications for a CMS about security issues
and updates every week? No worries, as a static site has no database and
no need for a dynamic rendering engine, there are close to *no hack* possible
compared to a, e.g., WordPress website. Indeed, your site will have way
fewer footprints and security issues since it will only load plain data
like HTML, Javascript, and CSS files. The security gain in having a
static website is one of the main reasons why many famous brands switch
to a static site instead of having their website managed by a dynamic,
database-driven CMS.

Hosting::
*Building a static site and hosting: you will save much time and money*.
Using a static site, you will only have most of the time only HTML and
CSS files to host. This kind of file is super light-weight which also means
that you will not need a powerhouse hosting to have a static site up and
running. Moreover, if your traffic suddenly increases, your site will not
go down, contrary to a dynamic site that should request the database
each time for every user.

Control::
*You're the master*.
Using a CMS means, giving control over your site to others. Simple like this.

== Why use a site generator?

Working with pure HTML files is annoying; senseless today. Indeed, if you need
to make a modification on your *self-managed* pages, you have to manually
change every file. That's monkey's work from the early days of static websites.
If your site comes with ten pages, it can be manageable but imagine if your site
is providing 100+ pages or the blog planned for hundreds of articles?

Using a static site *generator* will solve this issue as it separates the
content and the template giving web pages a common, manageable structure. To
say it another way, by using a static site generator, you will only need to
make the modification once, and the generator will apply it to all your pages.

=== Why Jekyll?

As the popularity of static sites is growing, there are plenty of static
site generators available on the market. The more famous are _Next.js_,
_Gatsby_, _Jekyll_, or _Hugo_. Each one has its own specificities and may
suits you better depending on the programming languages you already are
familiar with.

*Which static site generator should I use?*

When I decided to go for a generator for static webs, I personally choose
Jekyll as for me. It's a well-known static site generator, good support
in case of trouble, and the software gets regularly updated. Jekyll is based
on a modern dynamic programming language: _Ruby_. Ruby is widely used for
web-based projects and can make use of all web-related resources like
Javascript and CSS.

*This website is powered by Jekyll. For good reasons*.
