

Welcome to the third section of *Web in a Day*. You’ve survived all the
technical stuff and the preparations need for setting up a development
environment. Great job!

You may read a lot of marketing stuff around static websites, the tools, and
benefits. The following characterizes a static web generated by a
*Site Generator*:

* Static sites serve a fixed set of data that renders the same for every
  site visitor. Static sites use *server-side* rendering to serve pre-built
  HTML, CSS, and JavaScript files to a web browser.

* In opposition to CMS systems that use a database to load content
  dynamically, a static site will *directly* load the server's HTML files.

* Using a static site generator like _Jekyll_, the engine separates the
  content from the Template. Using a static site generator, you will only
  need to modify it once, and the generator will apply it to all your
  pages.


The Template System J1 uses _Jekyll_ under the hood and provides a lot of
high-level functions to control the web creation process:

* J1 is highly *customizable*. Based on a pure configuration, J1 can create
  a full-featured website. The template system creates static web pages
  using Jekyll as the base HTML code generator.

* For J1, a rich set of modules are already included. The modules support
  usual use cases of a website like a flexible navigation system, a local
  search, lightboxes to present pictures and videos, helpers for smooth
  scrolling, or to automatically create TOCs (table of contents) for a page.

Are all the statements true? Are static websites easy to create, fast and
secure? Is it easy to manage such a web? +
*Many open question for now*!

Let's start by creating a static web and *verify* if the promises could be
satisfied and what that means for your *First awesome Web*.

== A First awesome Web

The J1 Template GEM contains such a command-line interface: `j1`. The command
is used to create (generate) a web *project*. Generate such a project is the
very first step to manage a *new* website.

[NOTE]
====
To remind you of _Ruby_ GEMs. A GEM can contain command-line interfaces (CLI, commands) to access
higher-level functionality. Jekyll and J1 use that to provide the CLI
commands `jekyll` and `j1`.
====

=== Creating a J1 project

First, a project *folder* is needed. J1 can generate a project elsewhere, but
I recommend creating a central *Web* folder to place (all) websites.

Open a command shell (cmd.exe) and run:

.Base folder for all webs
[source, msshell]
----
md C:\J1Webs && cd C:\J1Webs
----
Next, a project is to be created for the new website using the CLI *j1*. It
is expected that your current folder (in that shell) is *C:\J1Webs*.

.Generate a starter web
[source, msshell]
----
j1 generate starter
----

This will take a while for the *first* J1 project because additional _Ruby_
GEMs are to be downloaded. Because some of the GEMs are *platform-specific*,
the DevKit (installed at the time the _Ruby_ language was installed) is
called to *compile* specific components for the _Windows_ platform.

----
Running bundle install in C:/J1Webs/starter ...
Install bundle in USER gem folder ~/.gem ...

      Bundler: Fetching gem metadata from https://rubygems.org/...
      Bundler: Fetching gem metadata from https://rubygems.org/...
      Bundler: Resolving dependencies...
      Bundler: Fetching rake 12.3.3
      Bundler: Installing rake 12.3.3
      ...
      Bundler: Fetching wdm 0.1.1
      Bundler: Installing wdm 0.1.1 with native extensions
      Bundler: Bundle complete! 33 Gemfile dependencies, 85 gems now installed.
      Bundler: Bundled gems are installed into `../../Users/<user_name>/.gem`

Install patches in USER gem folder ~/.gem ...   <1>
Install patches on path C:/Users/<user_name>/.gem/ruby/2.7.0 ...    <2>
Generated Jekyll site installed in folder C:/J1Webs/starter   <3>
----
<1> For J1 projects, some _Ruby_ modules are patched to make them usable
    on _Windows_
<2> Ruby GEM folder for *userized* modules
<3> J1 Project for the generated website

NOTE: Some Ruby GEMs, *eventmachine*, and *execJS*, for example, have to be
patched on _Windows_ respective for the newer versions of _Ruby_. As mentioned
earlier, a massive number of libraries are provided by private persons but not
*continuously* updated to make them usable for the recent versions of Ruby's
development system. The affected GEMs are currently *not* updated for the newer
versions of _Ruby_ of v27 or v26. For J1, the needed (patched) components were
added to the J1 Template system and applied when a project is generated.

CAUTION: Patched versions of the _Ruby_ GEMs *eventmachine* and *execJS*
are available only using *J1*. The original versions cannot be used and
will make the generator engine _Jekyll_ fail.

If the generation process has finished, this results in a project *scaffold*.
To make this scaffold a usable *J1* project, this data structure is to be
*initialized* first.


=== Setting up the project

The next step, done only once, is to *initialize* the project to download and
install all resources for your new website, followed by a *first* creation
process for the new website. Initializing a project is managed by the task
`setup` run by the _NodeJS_ package manager.

A bunch of sub-tasks gets fired. All of them are controlled package manager
*yarn* for you. The J1 project is generated in folder *C:\J1Webs\starter*.
Change to that folder and set up the project using the command `yarn`.

.Setting up the J1 project
[source, msshell]
----
cd C:\J1Webs\starter && yarn setup
----

Because a lot of **sub**-tasks getting started for a (first) `setup`, see
below the output as a summary:

----
Setup project for first use ..
Bootstrap base modules ..
done.
Configure environment ..
done.
Create project folders ..
Create log folder ..
Create archived log folder ..
Create etc folder ..
done.
Bootstrap project modules ..
Bootstrap utility server modules ..
done.
Detect OS ..
OS detected: Windows_NT
Build site incremental ..
Configuration file: C:/J1Webs/starter/_config.yml
            Source: C:/J1Webs/starter
       Destination: C:/J1Webs/starter/_site
 Incremental build: enabled
      Generating...
    J1 QuickSearch: creating search index ...
    J1 QuickSearch: finished, index ready.
      J1 Paginator: autopages, disabled|not configured
      J1 Paginator: pagination enabled, start processing ...
      J1 Paginator: finished, processed 1 pagination page|s
                    done in 37.609 seconds.
 Auto-regeneration: disabled. Use --watch to enable.
.. build finished.
To open the site, run: yarn site
Done in 94.94s.
----

The task `setup` takes a while. Typically some minutes for the *first*
run (depending on the performances of your Internet connection and your
Desktop PC). A bunch of NPM modules and Ruby Gems gets downloaded, installed,
and linked for the project. See the setup task as an extended *install* and
*build* process to make your new website ready to use.

=== Run a site

As discussed, all project-related *tasks* are managed by the package manager
for NodeJS -- in this case, yarn. The task to run a website is `site` and can
be issued like so:

.Run a J1 website
[source, msshell]
----
yarn site
----

The following messages appear in your command shell:

----
yarn run v1.22.10
$ run-p -s site:*
Startup the site ..
UTILSRV disabled. Not started.
Configuration file: C:/J1Webs/starter/_config.yml   <1>
            Source: C:/J1Webs/starter   <2>
       Destination: C:/J1Webs/starter/_site   <3>
 Incremental build: enabled
      Generating...
    J1 QuickSearch: recreate index disabled.
      J1 Paginator: autopages, disabled|not configured
      J1 Paginator: pagination enabled, start processing ...
      J1 Paginator: finished, processed 1 pagination page|s
                    done in 9.618 seconds.
 Auto-regeneration: enabled for '.'
LiveReload address: http://localhost:40001    <5>
    Server address: http://localhost:40000/   <4>
  Server running... press ctrl-c to stop.
        LiveReload: Browser connected   <6>
----
<1> The configuration file for the builder engine _Jekyll_
<2> The project folder
<3> The *WebRoot* folder for your website creaated
<4> The *URL* to access the web
<5> A *LiveReloader* is started and listens on port *40001*
<6> A webbrowser has been started automatically and the *LiveReloader*
    is connected

Your *default* web browser is automatically started, and the website gets
loaded. That should look like this way:

.The J1 build-in stater web
lightbox::kickstart-wiad--starter-web[ 800, {data-kickstart-wiad--starter-web} ]
// <1> Navigation bar
//<2> QuickLinks bar

Now, after so much theory and technical stuff, you should *explore* your
new website. The base navigation provided is the *Navigation* bar conum:1[].
and the *QuickLink* bar conum:2[].

Give your new starter web a try. Take some time to inspect your site, surf on
some pages, and come back to the next section: *Check your project in a code
editor*.

*Have a pleasant walk-around*!

NOTE: Some pages of the *Starter Web* are very the same as used for the J1's
homepage. All pages of the *roundtrip* are fully included with the example website
to help write more complex pages.


=== Check your project in a code editor

To *manage* a J1 project, the most critical tool to do this is the *editor*
you've installed. You can use a good code editor for a so-called
*Integrated Development Environment* (IDE). All functions, all features, are
included or can be easily added by *extensions*.

J1 Template comes with *no* Graphical User Interface (GUI) included. The
functionality of a *GUI* is substituted by the power of the IDE, your code
editor. For users not experienced in using code editors have to exercise a
bit how to use an editor. You’ll learn how helpful an IDE is and (hopefully)
understand why programmers prefer an IDE over any GUI-driven tool to work on
code-based projects.

NOTE: For examples related to the usage of a code editor, _Atom_ is used.
_VS Code_ supports you in the *same* way.

The base creating websites using J1 are:

* *code*, source data of your content
* *data*, control information for the builder engine _Jekyll_ how
  to transform source data into HTML pages

Both are written as simple *text* files, the reason why a code editor is a
good choice. Two *types* of files are the most important in the beginning
to know:

* for the *code*, the source data of your content, the markup language
  *Asciidoc* is used
* for the *data*, control information for the builder engine, the markup
  language *YAML* is used

In computer *text* processing, a markup language is a system for *annotating*
a (text-)document by *control* information: the markups. *Asciidoc* is used to
*annotate* the sources of your web content.

The Asciidoc markups indicate, for example, what text in a page should be
displayed in *boldface*, what text should be *headlines*, where to place
*images*, or what text should be transformed in *tables* or *lists*.

*YAML* is used to indicate text as *data structures* like simple *variables*
or more complex structures like *arrays*. The data is used by the builder
engine _Jekyll_ and by the build-in modules of the J1 Template to control
their behavior.

NOTE: J1 does *not* use a Database System in the sense of an *RDBMS*, a
Relational Database Management System as CMS does. For making a template
system like J1 flexible and configurable, a database is needed. The database
for J1 consists of (text-)files and folders.

You are reading this for the first time. And, understandably, the codebase is
difficult to understand. To become familiar with the codebase and folder
structure for a J1 project, have a look at your project by your favorite editor.
Open the project folder for your Starter Web, for example, *C:\J1Webs\starter*.

.Starter Web loaded by Atom Editor
lightbox::kickstart-wiad--starter-web[ 800, {data-kickstart-wiad--starter-web} ]

A J1 project consists of several files and folders. Find the structure
as below:

.J1 Project Structure
----
  ├──── .
  │     └─ _data  <1>
  │     └─ _includes <2>
  │     └─ _plugins <3>
  │     └─ assets <4>
  │     └─ collections <5>
  │     └─ pages <6>
  │     └─ utilsrv
  ├──── _config.yml <7>
  ├──── config.ru
  ├──── dot.gitattributes
  ├──── dot.gitignore
  ├──── dot.nojekyll
  ├──── favicon.ico
  ├──── Gemfile <8>
  ├──── index.html <9>
  └──── package.json <10>
----
<1>   J1 Configuration data
<2>   Asciidoc includes (global)
<3>   Build-in plugins (Ruby)
<4>   Assets for the Web
<5>   Folder that contains all Blog Posts
<6>   Folder that contains all Articles
<7>   Central site configuration (Jekyll)
<8>   Ruby Gemfile
<9>   Homepage for the Web
<10>  J1 Project file (NPM)

NOTE: After setting up a project,some more files are created by the *setup*
process in the *project* folder. For now, *ignore* these files.

==== The Jekyll configuration file

The Jekyll configuration file `_config.yml` sits in the *root* of your project
directory and, as the name suggests, controls the configuration settings how
*Jekyll* and *J1* are processing your site (from a global perspective).

Open this file in your editor. The configuration file is of type *text*, but
structured! The extention of *.yml* indicates this file of type *YAML*
containing *markups* to specify *data*. THe data in that file in in ordered in
sections for easier reading, comments, starting with a hash (*#*) are comments
not treated as data. Comments are ignored if such a file is being read and
processed for data extraction.

Open this file in your editor. The configuration file is of type *text* but
structured! The extension of *.yml* indicates this file of type *YAML*
containing markups to specify *data*. The data in that file is ordered in
sections for easier reading. Comments, starting with a hash (#), are not
treated as data. Comments are *ignored* if such a file is being read and
processed for data extraction.



.Selected configuration settings from `_config.yml`
[source, yaml]
----
# ==============================================================================
# 1. BUILD configuration
#
environment:                            production
version:                                2021.1.0
copyright:                              J1 · Copyright © 2021
theme:                                  j1-template

# ==============================================================================
# 2. THEME configuration
#
template:
  name:                                 j1
  config:                               j1_config

# ==============================================================================
# 3. SITE configuration
#
title:                                  J1
slogan:                                 starter
description:                            Made for Jekyll · Made for Your Web

keywords:                               Jekyll, One, Template, Ruby, Asciidoctor,
                                        Asciidoc, Bootstrap, Javascript,
                                        JS, JS3, CSS, CSS3, HTML5, Material, Design
brand:
  image:                                modules/icons/j1/j1-512x512.png
  image_height:                         48
  text:                                 Starter Web
  text_color:                           "#9E9E9E"

favicon:
  image:                                modules/icons/j1/j1-32x32.ico
  type:                                 image/ico

# ==============================================================================
# 4. JEKYLL specific site configuration
#
protocol:                               http
host:                                   localhost
port:                                   40000
timezone:                               Europe/Berlin
encoding:                               UTF-8

source:                                 .
destination:                            _site
plugins_dir:                            _plugins
layouts_dir:                            _layouts
data_dir:                               _data
includes_dir:                           _includes
collections_dir:                        collections

include:                                [ .htaccess ]
exclude:                                [ log, vendor, node_modules, ... ]
keep_files:                             []

strict_front_matter:                    true

plugins:
                                        - asciidoctor
                                        - jekyll-asciidoc
                                        - jekyll-sitemap
                                        - j1-paginator
----

From the config file you see, your website is processed in `production` mode.
The *variable* `environment` is assigned the *value* `production`. Pretty easy
to read, isn't it?. Now the first *magic* of using a code editor. In your
editor, press the keys kbd:[Ctrl+Shift+F] to open a project-wide search dialog.

.Search the project folder (Atom)
lightbox::kickstart-wiad--atom-project-search[ 800, {data-kickstart-wiad--atom-project-search} ]

All data for a J1 project are configured with *YAML* data files. Search
project-wide the variable `environment` to find what data file specifies this.
Search for the data assignment *environment:* (keep attention on the colon)
for all YAML data files. Your'done in no-time and no endless digging in endless
GUI menus is needed.

All data for a J1 project are configured with *YAML* data files. Search
project-wide for the variable `environment` to find what data file specifies
this. Search for the data *assignment* markup *environment:* (keep attention
on the colon) for all YAML data files in your project. You’re done in no time.
No endless digging in never-ending GUI menus and dialogs are needed.

Discussing all available configuration setting for Jekyll and J1 would take
at least another day. Find all settings for _Jekyll_ on the home page at:
link:{url-jekyll--docs-configuration}[Jekyll Configuration, {browser-window--new}]
A good Overview on the config settings and folder structure _Jekyll_ can
be found at CloudCannon: link:{url-cloudcannon--jekyll-file-structure}[The File structure, {browser-window--new}]


==== Exercise: environment modes

Environment modes are used to specify the built *environment* of a website.
J1 uses these modes to control the output of *HTML pages*.

.Environment modes
[cols="^3a,^3a,6a, subs=+macros, options="header", width="100%", role="rtable mt-3"]
|===============================================================================
|Name |Value |Description

|`environment`
|`production`
|In *production* mode, the generated HTML pages are *compressed* for faster
loading. All HTML elements not needed are stripped (comments), all whitespaces
and not needed control characters are deleted.

|`environment`
|`development`
|In *development* mode, the generated HTML pages are beatified for better
(human) reading. *No* elements are available  for code inspection

|===============================================================================

The *destination* folder for the generated web pages were set by:
[source, yaml]
----
destination:                            _site
----

You'll find a folder *_site* in your project root. Open that folder in your
editor and open the file *index.html*. The (HTML) paged generated is a *single*
line. All elements *not* needed for the browser are deleted.

.Home page in production mode (index.html)
lightbox::kickstart-wiad--atom-home-page-1[ 800, {data-kickstart-wiad--atom-home-page-1} ]

Generating HTML output for production this way is called *compression*,
deleting all elements not needed. The file size gets reduced to a minimum for
faster loading by the webserver. Compressed output is excellent for websites
that should be deployed (make them available) to a *public place*, to a server
providing your page on the *Internet*.

For *development*, compressed HTML pages are not useful. You'll see why in
a minute. Reconfigure the *value* for environment. Load the config file
*_config.yml* in your editor, change the value from `production` to
`development` and safe that file.

[source, yaml]
----
environment:                            development
----

NOTE: If global configuration settions (setting in *_config.yml*) are changed,
the web needs to be *rebuild*. This is a drawback for static websites.

Because a *global* configuration setting has changed, the web needs to be
*re-created*. This process is called *rebuilding* a site. Stop the running
web in the command shell by typing: kbd:[CTRL+C].

A J1 project runs _Jekyll_ in *incremental* mode with *auto-regeneration*
enabled. All changes made to your posts and pages at *runtime* are
automatically detected, and the affected files are rebuilt and (live) reloaded.
As mentioned, this doesn't work for *global configuration* changes.

A web can completely be *re-created* by running the task `rebuild`:

[source, sh]
----
yarn rebuild
----

----
Rebuild site incremental ..
Clean up site files ..
Configuration file: C:/J1Webs/starter/_config.yml
           Cleaner: Removing _site...
           Cleaner: Removing ./.jekyll-metadata...
           Cleaner: Removing ./.jekyll-cache...
           Cleaner: Nothing to do for .sass-cache.
Configuration file: C:/J1Webs/starter/_config.yml
            Source: C:/J1Webs/starter
       Destination: C:/J1Webs/starter/_site
 Incremental build: enabled
      Generating...
    J1 QuickSearch: creating search index ...
    J1 QuickSearch: finished, index ready.
      J1 Paginator: autopages, disabled|not configured
      J1 Paginator: pagination enabled, start processing ...
      J1 Paginator: finished, processed 1 pagination page|s
                    done in 14.54 seconds.
 Auto-regeneration: disabled. Use --watch to enable.
.. rebuild finished.
To open the site, run: yarn site.
Done in 24.43s.
----

If the site has been rebuild, re-run the task `site` to make the web
available, again

[source, sh]
----
yarn site
----

The HTML output has been changed for *development*. In your code editor, the
home page looks very different:

[source, html]
----
<!DOCTYPE html>
<html lang="en">
  <!-- [INFO   ] [j1.layout.default.html                ] [ page generated: 2021-04-08 17:40:01 +0000 ] -->
  <!-- [INFO   ] [j1.layout.default.html                ] [ environment detected as: development ] -->
  <head data-proofer-ignore>
    <!-- [INFO   ] [j1.layout.default.html                ] [ call default_writer for region: 'head' ] -->
    <!-- [INFO   ] [j1.layout.default_writer.proc         ] [ start processing: load region head, layout: home ] -->
    <!-- [INFO   ] [j1.layout.meta_data_generator.html    ] [ start processing: place meta tags (taken from site config|page frontmatter) ] -->
    <!-- [INFO   ] [j1.layout.meta_data_generator.html    ] [ page|content encoding ] -->
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
    <!-- [INFO   ] [j1.layout.meta_data_generator.html    ] [ added for MS Edge Browser ] -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- [INFO   ] [j1.layout.meta_data_generator.html    ] [ initial zoom level when the page is first loaded by the browser ] -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>starter</title>
    <!-- [INFO   ] [j1.layout.meta_data_generator.html    ] [ SIZE of site description: 36 chars ] -->
    <!-- [SEO    ] [j1.layout.meta_data_generator.html    ] [ Consider! IMPROVE|INCREASE your site description, recommended: 70-160 characters ] -->
    <meta name="description" content="Made for Jekyll · Made for Your Web">
    <link rel="icon" type="image/ico" href="/assets/images/modules/icons/j1/j1-32x32.ico">
    <meta name="author" content="username">
    <meta name="keywords" content="Jekyll, One, Template, Ruby, Asciidoctor, Asciidoc, Bootstrap, Javascript, JS, JS3, CSS, CSS3, HTML5, Material, Design">
    <meta name="robots" content="index">
    <meta name="robots" content="follow">
    <!-- [INFO   ] [j1.layout.meta_data_generator.html    ] [ PRELOAD of fonts: disabled ] -->
    <!-- [SEO    ] [j1.layout.meta_data_generator.html    ] [ Consider! PRELOAD primary used fonts to prioritize fetching ] -->
    <!-- [INFO    ] [j1.layout.meta_data_generator.html    ] [ Gratulations! PRELOAD of css: enabled ] -->
    <!-- [SEO     ] [j1.layout.meta_data_generator.html    ] [ request PRELOAD of font to prioritize fetching ] -->
    <link rel="preload" as="style" href="/assets/themes/j1/core/css/themes/uno-light/bootstrap.css">
    <link rel="preload" as="style" href="/assets/themes/j1/core/css/vendor.css">
    <!-- [INFO    ] [j1.layout.meta_data_generator.html    ] [ Gratulations! PRELOAD of js: enabled ] -->
    <!-- [SEO     ] [j1.layout.meta_data_generator.html    ] [ request PRELOAD of font to prioritize fetching ] -->
    <link rel="preload" as="script" href="/assets/themes/j1/modules/bmd/js/bootstrap-material-design.js">
    <link rel="preload" as="script" href="/assets/themes/j1/modules/backstretch/js/backstretch.js">
    <link rel="preload" as="script" href="/assets/themes/j1/core/js/template.js">
    <!-- [INFO   ] [j1.layout.meta_data_generator.html    ] [ PRELOAD js as FILE ] -->
    <link rel="preload" as="script" href="/assets/themes/j1/adapter/js/attic.js">
    <!-- [INFO   ] [j1.layout.meta_data_generator.html    ] [ PRELOAD js as FILE ] -->
    <link rel="preload" as="script" href="/assets/themes/j1/adapter/js/logger.js">
    <!-- [INFO   ] [j1.layout.meta_data_generator.html    ] [ PRELOAD js as FILE ] -->
    <link rel="preload" as="script" href="/assets/themes/j1/adapter/js/bmd.js">
    <!-- [INFO   ] [j1.layout.meta_data_generator.html    ] [ PRELOAD js as FILE ] -->
    <link rel="preload" as="script" href="/assets/themes/j1/adapter/js/navigator.js">
    <!-- [INFO   ] [j1.layout.meta_data_generator.html    ] [ PRELOAD of images: disabled ] -->
    ...
----

The HTML output is *no* longer a vast single line. Many (HTML-)comments are
available that explain what had happened while processing this page. The
comments provide helpful information, what *component* of the Template was
involved in what *processing step*.

NOTE: For this tutorial, or for creating webs in general, it's not needed
to know how J1 processes HTML pages. But for people interested in more
technical details, the comments explain what had happened in terms of the
processing chain. The comments help understand the underlying builder engine
and what modules were involved in creating the HTML page.

Well done, folks! You managed to create a J1 project and run your first web. +
*Have a break, save energy for the next*!
