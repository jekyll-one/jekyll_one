// ~/document_base_folder/_includes
//  Asciidoc part includes:                 parts.asciidoc
// -----------------------------------------------------------------------------

// Questions
// -----------------------------------------------------------------------------

//  tag::questions[]
//
With the questionnaire, you can find all the questions from the entire
tutorial in one place.  Once you have finished working with the tutorial,
you can easily use this catalog for a personal review.

*Are the questions easy to understand*? +
*Were you able to give the answers easily*?

There will be many reasons if this is not the case. Your learning success
depends crucially on whether the knowledge provided was easy to understand
and whether the tutorial structure helped you make good progress. If you had
difficulties working with the tutorial or see possibilities for improvement,
we are very grateful for feedback.

We love comments and appreciate our visitorâ€™s time to share ideas and give
feedback. Thank you to everyone who places a comment on the J1 Template
website.

//
//  end::questions[]

//  tag::questions-chapter[]
//
The following questions will help you review this chapter for the essential
topics for better *learning success*.

First, answer the questions on paper. Before you look up an answer, take
some time to answer the question yourself. If you find it challenging to
find the correct answers, refer to the previous sections.

*Clicking* the link on the *question number* will open a new page (tab) in
your web browser and point you to the answer. This page helps to navigate
to the questions by a table of content (TOC). Go for the question *number*
or the chapter *title*.

TIP: If you finished the *questions* section, you could *close* the browser
windows (tabs) opened for answers or questions and continue on *this* page
for the next section.

//
//  end::questions-chapter[]

//  tag::questions-section[]
//
Find all *questions* in this section. For reading the *answer*, the
link *Read the answer* below each question is pointing to the *Answer* page
loaded the *same* browser windows (tab). To get back, a corresponding link
*Back to question* is placed below each *answer*.

//
//  end::questions-section[]

//  100_meet_and_greet
// -----------------------------------------------------------------------------

//  tag::question-1[]
//

==== conum:1[] Question

[role="mt-4"]
[QUESTION]
====
What is the general difference between dynamic and static websites in terms
of using databases?
====

mdi:subdirectory-arrow-right[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--answer-1}[Read the answer]

//
//  end::question-1[]

//  tag::question-2[]
//
==== conum:2[] Question

[role="mt-4"]
[QUESTION]
====
Static websites are considered to be safe. Are there any reasons for this?
====

mdi:subdirectory-arrow-right[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--answer-2}[Read the answer]

//
//  end::question-2[]

//  tag::question-3[]
//
==== conum:3[] Question

[role="mt-4"]
[QUESTION]
====
Are there any reasons to use a site generator for static websites?
====

mdi:subdirectory-arrow-right[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--answer-3}[Read the answer]

//
//  end::question-3[]

// 110_getting_prepared
// -----------------------------------------------------------------------------

//  tag::question-4[]
//
==== conum:4[] Question

[role="mt-4"]
[QUESTION]
====
What user can install software on Windows?
====

mdi:subdirectory-arrow-right[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--answer-4}[Read the answer]

//
//  end::question-4[]

//  tag::question-5[]
//
==== conum:5[] Question

[role="mt-4"]
[QUESTION]
====
For _Ruby_, GEMs (libraries) can be installed *system-wide* or *userized*.
What are the differences?
====

mdi:subdirectory-arrow-right[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--answer-5}[Read the answer]

//
//  end::question-5[]

//  tag::question-6[]
//
==== conum:6[] Question

[role="mt-4"]
[QUESTION]
====
If _Ruby_ GEMs are installed *userized*, what is to be considered to make
userized GEMs fully accessible?
====

mdi:subdirectory-arrow-right[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--answer-6}[Read the answer]

//
//  end::question-6[]

// 200_first_awesome_web
// -----------------------------------------------------------------------------

//  tag::question-7[]
//
==== conum:7[] Question

[role="mt-4"]
[QUESTION]
====
The J1 Template System is using _NodeJS_. For what?
====

mdi:subdirectory-arrow-right[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--answer-7}[Read the answer]

//
//  end::question-7[]

//  tag::question-8[]
//
==== conum:8[] Question

[role="mt-4"]
[QUESTION]
====
A code editor is a critical tool to manage J1 projects. What are the
main reasons?
====

mdi:subdirectory-arrow-right[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--answer-8}[Read the answer]

//
//  end::question-8[]

//  tag::question-9[]
//
==== conum:9[] Question

[role="mt-4"]
[QUESTION]
====
The Jekyll builder engine make use of a central configuration file.
Give two examples of the settings and what do they control.
====

mdi:subdirectory-arrow-right[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--answer-9}[Read the answer]

//
//  end::question-9[]

//  tag::question-10[]
//
==== conum:10[] Question

[role="mt-4"]
[QUESTION]
====
J1 is using two environment modes to control the HTML outputs for a website.
What modes are available and what do they control?
====

mdi:subdirectory-arrow-right[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--answer-10}[Read the answer]

//
//  end::question-10[]

// 300_writing_articles
// -----------------------------------------------------------------------------

//  tag::question-11[]
//
==== conum:11[] Question

[role="mt-4"]
[QUESTION]
====
Frage 11 !!!
====

mdi:subdirectory-arrow-right[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--answer-11}[Read the answer]

//
//  end::question-11[]

//  tag::question-12[]
//
==== conum:12[] Question

[role="mt-4"]
[QUESTION]
====
Frage 12 !!!
====

mdi:subdirectory-arrow-right[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--answer-12}[Read the answer]

//
//  end::question-12[]

//  tag::question-13[]
//
==== conum:13[] Question

[role="mt-4"]
[QUESTION]
====
Frage 13 !!!
====

mdi:subdirectory-arrow-right[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--answer-13}[Read the answer]

//
//  end::question-13[]

//  tag::question-14[]
//
==== conum:14[] Question

[role="mt-4"]
[QUESTION]
====
Frage 14 !!!
====

mdi:subdirectory-arrow-right[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--answer-14}[Read the answer]

//
//  end::question-14[]


// Answers
// -----------------------------------------------------------------------------

//  tag::answers[]
//
You can find all the answers to the questions in the various sections here.
Before you look up an answer, take some time to answer the question yourself.

NOTE: You can go back to a *questions* by clicking on the link
*Back to question* below each answer.

//
//  end::answers[]

//  tag::answers-section[]
//
Find all *answers* to questions in this section. To get back to the
*questions* page, a corresponding link *Back to question* is placed below
each *answer*. The *questions* page loaded the *same* browser windows (tab).

// Find all *answers* to questions in this section. For reading the *answer*, the
// link *Read the answer* below each question is pointing to the *Answer* page
// loaded the *same* browser windows (tab). To get back, a corresponding link
// *Back to question* is placed below each *answer*.

//
//  end::answers-section[]

// 100_meet_and_greet
// -----------------------------------------------------------------------------

//  tag::answer-1[]
//
==== conum:1[] Answer

[role="mt-4"]
.What is the general difference between dynamic and static websites in terms of using databases?
[ANSWER]
====
Static webs do *not* use a database system (RDBMS). Static build sites *may*
use *configuration* files locally for the building process but never published
to the resulting website.
====

mdi:subdirectory-arrow-left[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--question-1}[Back to question]

//
//  end::answer-1[]

//  tag::answer-2[]
//
==== conum:2[] Answer

[role="mt-4"]
.Static websites are considered to be safe. Are there any reasons for this?
[ANSWER]
====
Statically build web pages having no moving parts. They are built *already*.
Because of their *static* nature, pages are intrinsically secure because not
*changeable*.
====

mdi:subdirectory-arrow-left[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--question-2}[Back to question]

//
//  end::answer-2[]

//  tag::answer-3[]
//
==== conum:3[] Answer

[role="mt-4"]
.Question 3
[ANSWER]
====
A static site generator takes source files and generates an entirely static
website based on an underlying template system.

A static site generator separates the content and the template giving web
pages a standard, manageable structure. Using a static site generator, you
will only need to modify it once, and the generator will apply it to all
your pages.
====

mdi:subdirectory-arrow-left[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--question-3}[Back to question]

//
//  end::answer-3[]

// 110_getting_prepared
// -----------------------------------------------------------------------------

//  tag::answer-4[]
//
==== conum:4[] Answer

[role="mt-4"]
.Question 4
[ANSWER]
====
To install software on _Windows_, a user needs *administrative* user rights
to do so. That means only an *elevated* user account can install applications.
On _Windows_, the *User Access Control* (UAC) system supports non-elevated
user accounts to install software for the OS. Under the hood, the user gets
*elevated* by UAC for the installation process, and no *permanent*
administrative privileges are needed.
====

mdi:subdirectory-arrow-left[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--question-4}[Back to question]

//
//  end::answer-4[]

//  tag::answer-5[]
//
==== conum:5[] Answer

[role="mt-4"]
.For _Ruby_, GEMs (libraries) can be installed *system-wide* or *userized*. What are the differences?
[ANSWER]
====
Installing a programming language like Ruby, the same as all *related*
components like modules (libraries, GEMs), will need elevated user rights
to do so. The reason is, such an installation provides access for all users
of a system.

Ruby supports *different* strategies to install *modules*. Two of them are:

 * globalized
 * userized

If libraries should be available to *all* users, elevated user rights are
needed to install GEMs *into* the system path *globalized*.

For *modules* needed only for a specific user or application, libraries can be
installed alternatively *userized*. This installation type does *not* use the
*system* path of the *global* _Ruby_ installation. Instead, all components get
installed to the *user's* home directory using *non-privileged* folders.
====

mdi:subdirectory-arrow-left[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--question-5}[Back to question]

//
//  end::answer-5[]

//  tag::answer-6[]
//
==== conum:6[] Answer

[role="mt-4"]
.If _Ruby_ GEMs are installed *userized*, what is to be considered to make userized GEMs fully accessible?
[ANSWER]
====
Libraries (GEM's) for _Ruby_ *can* contain command-line programs (CLI). A
userized installation will install all GEMs with the user's home directory.
For full access to any userized GEMs, the user environment must extend for
the GEM's binary paths located in the user's home directory.
====

mdi:subdirectory-arrow-left[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--question-6}[Back to question]

//
//  end::answer-6[]

// 200_first_awesome_web
// -----------------------------------------------------------------------------

//  tag::answer-7[]
//
==== conum:7[] Answer

[role="mt-4"]
.The J1 Template System is using _NodeJS_. For what?
[ANSWER]
====
A *J1 Template-based* website is a *project* controlled by the NodeJS package
manager *yarn*. The manager tool is used for all project-related *tasks*
like *setting up*, *running*, or *rebuilding* a web.
====

mdi:subdirectory-arrow-left[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--question-7}[Back to question]

//
//  end::answer-7[]

//  tag::answer-8[]
//
==== conum:8[] Answer

[role="mt-4"]
.A code editor is a critical tool to manage J1 projects. What are the main reasons?
[ANSWER]
====
A *J1* project is *code-based* and comes with *no* Graphical User Interface
(GUI) included. The functionality of a GUI is substituted by the power of
the IDE provided by the *code editor*.
====

mdi:subdirectory-arrow-left[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--question-8}[Back to question]

//
//  end::answer-8[]

//  tag::answer-9[]
//
==== conum:9[] Answer

[role="mt-4"]
.The Jekyll builder engine make use of a central configuration file. Give two examples of the settings and what do they control.
[ANSWER]
====
The Jekyll configuration file `_config.yml` sits in the *root* of the J1
project directory and controls the configuration settings how *Jekyll* and
*J1* are processing a website site from a *global* perspective.

The property `destination` specifies the output path of the *generated* web.
The property `plugins` control what Ruby GEM's should be loaded as *plugins*
if the builder engine is processing a web.
====

mdi:subdirectory-arrow-left[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--question-9}[Back to question]

//
//  end::answer-9[]

//  tag::answer-10[]
//
==== conum:10[] Answer

[role="mt-4"]
.J1 is using two environment modes to control the HTML outputs for a website. What modes are available and what do they control?
[ANSWER]
====
Environment modes are used to specify the built environment of a website,
controls the HTML processing. J1 uses these modes to control the *output* of
*HTML pages*.

Available modes are `production` and `development`. In mode `production`,
the resulting HTML pages of website are *compressed*, stripped by all *not*
needed *HTML* elements. In mode `development`, *no* compressing of any page
is done.

Available modes are `production` and `development`. The resulting HTML
pages are compressed for mode `production`, stripped for all HTML elements
not needed. For mode development, no compressing of any page is done.
====

mdi:subdirectory-arrow-left[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--question-10}[Back to question]

//
//  end::answer-10[]

// 300_writing_articles
// -----------------------------------------------------------------------------

//  tag::answer-11[]
//
==== conum:11[] Answer

[role="mt-4"]
.Question 11
[ANSWER]
====
Bla.
====

mdi:subdirectory-arrow-left[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--question-11}[Back to question]

//
//  end::answer-11[]

//  tag::answer-12[]
//
==== conum:12[] Answer

[role="mt-4"]
.Question 12
[ANSWER]
====
Bla.
====

mdi:subdirectory-arrow-left[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--question-12}[Back to question]

//
//  end::answer-12[]

//  tag::answer-13[]
//
==== conum:13[] Answer

[role="mt-4"]
.Question 13
[ANSWER]
====
Bla.
====

mdi:subdirectory-arrow-left[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--question-13}[Back to question]

//
//  end::answer-13[]

//  tag::answer-14[]
//
==== conum:14[] Answer

[role="mt-4"]
.Question 14
[ANSWER]
====
Bla.
====

mdi:subdirectory-arrow-left[24px, md-grey-700 mb-5 mr-2]
link:{j1-kickstart-wiad--question-14}[Back to question]

//
//  end::answer-14[]


// End Questionaire ------------------------------------------------------------


// Summarize
// -----------------------------------------------------------------------------
//  tag::summarize[]
//
A lot you've learned, time to summarize what is in behind. The last chapter
*Summarize!* should help on that. Summarize! offer some handy sections to
remember what was presented, giving an outlook what could be done next.
This section provides an overview on all chapters this tutorial and finally
useful links to read more.

See all *sections* below: +

mdi:backup-restore[24px, md-blue ml-3 mr-2]
<<Recap>> -- What has been done, what's *explored in current section* +
mdi:page-next-outline[24px, md-blue ml-3 mr-2]
<<Whats Next>> -- Find to go further, what's *planned next* +
mdi:format-section[24px, md-blue ml-3 mr-2]
<<All Chapters>> -- The full chain, *all chapters* +
mdi:link-variant[24px, md-blue ml-3 mr-2]
<<Further Reading>> -- List of helpful links to *get more*

//
//  end::summarize[]

// End Summarize ---------------------------------------------------------------


// Recap
// -----------------------------------------------------------------------------
//  tag::recap_100_meet_and_greet[]
//
You learned the general differences in the architecture of static and dynamic
websites. A static site serves the content straight to the user as it's
already prepared (rendered) on the server-side. Content Management Systems
(CMS) provide the content dynamically (at request time) what requires an
intermediate rendering system that is using a database system, an RDBMS
(Relational Database Management System) like _MySQL_ or _Postgres_.

Modern static webs are powerful because of the availability of an increasing
number of excellent developing tools. One of them is Jekyll, a generator
engine for static webs based on the programming language _Ruby_. Along with
a flexible templating system like J1, webs generated by Jekyll will meet all
the criteria for a modern website, at least for smaller or midsize projects.

The architecture of static websites is incredibly simple. Because of the
simplicity, those sites are less in components, fast, robust, and secure. The
deployment of static webs is easy to manage, does not require costly high-end
computers to run.
//
//  end::recap_100_meet_and_greet[]

//  tag::recap_110_getting_prepared[]
//
Installing the development environment was not an easy job, many things to
consider. If you install the software youâ€™ve never seen before, it makes
sense to know what needs to be done in more detail. And it is required to
verify if the installation was successful and gives results for their
(installation) locations respectively the versions as expected. Youâ€™ve
learned that elevated user rights are needed to install the software
(system-wide) but *not* needed to run, to use an application!

Especially for development tools, some more questions came up in terms of
the libraries to be installed. All modern dynamic programming languages
like NodeJS, Ruby, or Python support the extending their functionality by
the system- and user-defined modules.

System modules are to be installed with the installation path of the main
application. This install type is called *global*. Youâ€™ve seen that this is
not always a good choice for user-defined libraries. The install type for
user-defined modules is called *local* if those modules are not installed
system-wide.

NodeJS and Ruby support different strategies to install modules *locally*.
Two of them are:

* userized
* vendorized

Youâ€™ve learned for _Ruby_, the default installation type for GEMs is *global*.
Still, in many cases, it makes sense to install GEMs *userized* to not pollute
the central installation by libraries *not* needed globally. NodeJS has a
different approach for installing modules: *vendorized* for default. That
means the modules are installed within the *project* folder.

.Library folder hierarchy
lightbox::library--folders-1[ 600, {data-library--folders-1} ]

callout::1["Library folder hierarchy"]
callout::2["Storage strategy"]
callout::3["Search path", ml-2 mb-3]

Library folders build a hierarchy. A search path is needed to locate a module
along this hierarchy to get access to these resources. For Ruby GEMs, the
decision to install J1 and Ruby GEMs was *userized*. The user environment was
adjusted to locate the (Ruby) main installation path (system modules) and
the userâ€™s path to get full access to all GEMS installed userized.

For NodeJS, no adjustments are needed because, for default, the *project* path
is used. If you run commands later on to control a *J1 project*, you will do
this out of the project path. This will implicitly set the *vendorized* path
to the current (project) path.
// end::recap_110_getting_prepared[]

//  tag::recap_200_first_awesome_web[]
//
Again, a chapter full of *hard* stuff, You learned, a website managed a *J1*
is a *project*. Creating *J1* projects is done by the CLI *j1*, part of the
_Ruby_ GEM *j1-template*.

You have compared some folders on the source and destination of a J1 project.
_Jekyll_ is a tricky thing, as you've seen for a closer look what the engine
is doing. Document types and classes in the sense of the builder engine are
important to know to understand the different behavior outputting a web to a
destination.

J1 is a **GEM**-based template. Nice, but this has consequences! It
should be much more understandable, not in all details, what the reasons are
why some resources of a web can be found on the destination but *not* available
with the project on a *source-level*.

J1 projects managed by a NodeJS project manager. The preferred manager tool
is *yarn*. The manager tool yarn is used for all project-related *tasks*
like *setting up*, *running*, or *rebuilding* a web.
Find a summary of the tools and tasks in the table below.

.Commands and Tasks to manage a J1 project
[cols="^3a,^3a,6a, subs=+macros, options="header", width="100%", role="rtable mt-3"]
|===============================================================================
|Command |Task |Description

|j1
|`generate`
|Creating a J1 project is done by the CLI *j1*, provided by the (_Ruby_)
GEM *j1-template*. The task `generate` creates an initial *scaffold* for a
website.

|yarn
|`setup`
|For managing a *J1* project, the (NodeJS) project manager *yarn* is used.
Make an initial *scaffold* for a project a usable website, a project
has to be initialized first.

|yarn
|`site`
|Running a website out of a *J1* project, the project manager yarn is started
by the task `site`.

|yarn
|`rebuild`
|If making changes to the global configuration, a website needs to be
*re-created*. To *rebuild*  a website from scratch, the (NodeJS) project
manager yarn is called for the task `rebuild`.

|===============================================================================

//
// end::recap_200_first_awesome_web[]

// End Recap -------------------------------------------------------------------


// Whats Next
// -----------------------------------------------------------------------------
// tag::whats_next_100_meet_and_greet[]
//
A lot of theory and background information was discussed. Important to know
for better orientation for the next steps to do: making a static Jekyll web
real.

What is needed to start the work is given in the next section. Upfront: it's
not that much. Besides a typical Office-PC and an Internet connection, some
tools are to be installed. All software is available on the Internet
*for free* - all it's Open Source!

mdi:page-next-outline[24px, md-blue ml-3 mr-2]
Go for link:{j1-kickstart-wiad--getting-prepared}[Getting prepared] then! +

//
// end::whats_next_100_meet_and_greet[]

// tag::whats_next_110_getting_prepared[]
//
Almost all of the technical stuff is behind you. The following section,
First awesome Web, is much more related to what the title of this tutorial
implies: *Web in Day*.

Create from here your link:{j1-kickstart-wiad--first-awesome-web}[First awesome Web]!

//
// end::whats_next_110_getting_prepared[]

// tag::whats_next_200_first_awesome_web[]
//
Well done, folks! You managed to create a J1 project and run your first web. +
*Take some time to relax, save energy for the next*!

The following chapters focus on content creation, explain how to write *posts*
and  *pages* using J1. These sections discuss the *writing* and the use of the
markup language *Asciidoc* for your content. +
*Make your website real*!

Continue on next section to create pages on your own:
link:{j1-kickstart-wiad--writing-articles}[Writing Articles]!

//
// end::whats_next_200_first_awesome_web[]

// End Whats Next --------------------------------------------------------------


// Chapters
// -----------------------------------------------------------------------------
// tag::chapters[]
//
Find here an overview on *all* chapters this tutorial. +

//
// end::chapters[]

// tag::chapters_100_meet_and_greet[]
//
mdi:format-section[24px, md-blue ml-3 mr-2]
You are here -- Meet & Greet Jekyll +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--getting-prepared}[Getting prepared] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--first-awesome-web}[First awesome Web] +

/////
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--writing-articles}[Writing Articles] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--writing-blog-posts}[Writing Blog Posts] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--design-your-site}[Design your Site] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--wrapping-up}[Wrapping up] +
/////

//
// end::chapters_100_meet_and_greet[]

// tag::chapters_110_getting_prepared[]
//
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--meet-and-greet}[Meet & Greet Jekyll] +
mdi:format-section[24px, md-blue ml-3 mr-2]
You are here -- Getting prepared +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--first-awesome-web}[First awesome Web] +

/////
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--writing-articles}[Writing Articles] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--writing-blog-posts}[Writing Blog Posts] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--design-your-site}[Design your Site] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--wrapping-up}[Wrapping up] +
/////

//
// end::chapters_110_getting_prepared[]

// tag::chapters_200_first_awesome_web[]
//
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--meet-and-greet}[Meet & Greet Jekyll] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--getting-prepared}[Getting prepared] +
mdi:format-section[24px, md-blue ml-3 mr-2]
You are here -- First awesome Web +

/////
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--writing-articles}[Writing Articles] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--writing-blog-posts}[Writing Blog Posts] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--design-your-site}[Design your Site] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--wrapping-up}[Wrapping up] +
/////

//
// end::chapters_200_first_awesome_web[]

// tag::chapters_300_writing_articles[]
//
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--meet-and-greet}[Meet & Greet Jekyll] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--getting-prepared}[Getting prepared] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--first-awesome-web}[First awesome Web] +
mdi:format-section[24px, md-blue ml-3 mr-2]
You are here -- Writing Articles +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--writing-blog-posts}[Writing Blog Posts] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--design-your-site}[Design your Site] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--wrapping-up}[Wrapping up] +

//
// end::chapters_300_writing_articles[]

// tag::chapters_310_writing_blog_posts[]
//
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--meet-and-greet}[Meet & Greet Jekyll] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--getting-prepared}[Getting prepared] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--first-awesome-web}[First awesome Web] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--writing-articles}[Writing Articles] +
mdi:format-section[24px, md-blue ml-3 mr-2]
You are here -- Writing Blog Posts +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--design-your-site}[Design your Site] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--wrapping-up}[Wrapping up] +

//
// end::chapters_310_writing_blog_posts[]

// tag::chapters_400_design_your_site[]
//
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--meet-and-greet}[Meet & Greet Jekyll] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--getting-prepared}[Getting prepared] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--first-awesome-web}[First awesome Web] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--writing-articles}[Writing Articles] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--writing-blog-posts}[Writing Blog Posts] +
mdi:format-section[24px, md-blue ml-3 mr-2]
You are here -- Design your Site +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--wrapping-up}[Wrapping up] +

//
// end::chapters_400_design_your_site[]

// tag::chapters_500_wrapping_up[]
//
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--meet-and-greet}[Meet & Greet Jekyll] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--getting-prepared}[Getting prepared] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--first-awesome-web}[First awesome Web] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--writing-articles}[Writing Articles] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--writing-blog-posts}[Writing Blog Posts] +
mdi:format-section[24px, md-blue ml-3 mr-2]
link:{j1-kickstart-wiad--design-your-site}[Design your Site] +
mdi:format-section[24px, md-blue ml-3 mr-2]
You are here -- Wrapping up +

//
// end::chapters_500_wrapping_up[]

// End Chapters ----------------------------------------------------------------


// Further Reading
// -----------------------------------------------------------------------------
// tag::further_reading[]
//
Find from here some interesting links to additional sources of information for
further reading. It's not needed to go for all the pages, but the links will
give some more background provided by other people, what they do, and what
other experts have on their minds. +

//
// end::further_reading[]

// tag::further_reading_100_meet_and_greet[]
//
mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{url-jekyll--home}[Jekyll Home -- First address for Jekyll, {browser-window--new}] +
mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{url-jekyll-tips--why-use-static-site-generator}[CloudCannon -- Why use a static site generator?, {browser-window--new}]

//
// end::further_reading_100_meet_and_greet[]

// tag::further_reading_110_getting_prepared[]
//
mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{url-nodejs--learn}[NodeJS -- Introduction to Node.js, {browser-window--new}] +
mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{url-ruby-lang--intro}[Ruby -- Ruby in Twenty Minutes, {browser-window--new}] +
mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{url-jekyll--home}[Jekyll Home -- Install Jekyll, {browser-window--new}] +
mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{url-cloudcannon--install-jekyll-on-windows}[CloudCannon -- Install Jekyll on Windows, {browser-window--new}]

//
// end::further_reading_110_getting_prepared[]

// tag::further_200_first_awesome_web[]
//
mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{url-jekyll--docs-configuration}[Jekyll Home - Jekyll Configuration, {browser-window--new}] +
mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{url-cloudcannon--jekyll-file-structure}[CloudCannon - The Jekyll File structure, {browser-window--new}] +
mdi:link-variant[24px, md-blue ml-3 mr-2]
link:{url-digitalocean--jekyll-tutorials}[DigitalOcean - Jekyll Tutorials, {browser-window--new}]

//
// end::further_200_first_awesome_web[]


// End Further Reading ---------------------------------------------------------
