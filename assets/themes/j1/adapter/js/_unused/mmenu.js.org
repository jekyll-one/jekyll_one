---
regenerate:                             false
---

{% capture cache %}

{% comment %}
 # -----------------------------------------------------------------------------
 # ~/assets/themes/j1/adapter/js/mmenu.js
 # Liquid template to adapt Mmenu-Light Core functions
 #
 # Product/Info:
 # https://jekyll.one
 #
 # Copyright (C) 2020 Juergen Adams
 #
 # J1 Template is licensed under the MIT License.
 # For details, see https://jekyll.one
 # -----------------------------------------------------------------------------
 # Test data:
 #  {{ liquid_var | debug }}
 # -----------------------------------------------------------------------------
 # NOTE:
 #
 # JSON pretty print
 # Example: var str = JSON.stringify(obj, null, 2); // spacing level = 2
 # See: https://stackoverflow.com/questions/4810841/how-can-i-pretty-print-json-using-javascript
 # -----------------------------------------------------------------------------
{% endcomment %}

{% comment %} Liquid procedures
-------------------------------------------------------------------------------- {% endcomment %}
{% capture select_color %}themes/{{site.template.name}}/procedures/global/select_color.proc{% endcapture %}

{% comment %} Set global settings
-------------------------------------------------------------------------------- {% endcomment %}
{% assign environment                   = site.environment %}
{% assign brand_image_height            = site.brand.image_height %}

{% comment %} Process YML config data
================================================================================ {% endcomment %}

{% comment %} Set config files
{% assign auth_manager_config           = site.j1_auth %}
-------------------------------------------------------------------------------- {% endcomment %}
{% assign site_config                   = site %}
{% assign template_config               = site.data.template_settings %}
{% assign blocks                        = site.data.blocks %}
{% assign modules                       = site.data.modules %}

{% assign template_config               = site.data.template_settings %}
{% assign navigator_defaults            = site.data.modules.defaults.navigator.defaults %}
{% assign navigator_settings            = site.data.modules.navigator.settings %}

{% comment %} Set config data
-------------------------------------------------------------------------------- {% endcomment %}
{% assign nav_mmenu_defaults            = navigator_defaults.nav_mmenu %}
{% assign nav_mmenu_settings            = navigator_settings.nav_mmenu %}

{% comment %} Set config options
-------------------------------------------------------------------------------- {% endcomment %}
{% assign nav_mmenu_options             = nav_mmenu_defaults | merge: nav_mmenu_settings %}
{% assign nav_mmenu_id                  = navigator_defaults.nav_mmenu.xhr_container_id %}
{% assign nav_navbar_media_breakpoint   = navigator_defaults.nav_bar.media_breakpoint %}

/*
 # -----------------------------------------------------------------------------
 # ~/assets/themes/j1/adapter/js/mmenu.js
 # JS Adapter for J1 MobileMenu (MMenu Light)
 #
 # Product/Info:
 # {{site.data.template_settings.theme_author_url}}
 #
 # Copyright (C) 2020 Juergen Adams
 #
 # J1 Template is licensed under the MIT License.
 # For details, see {{site.data.template_settings.theme_author_url}}
 # -----------------------------------------------------------------------------
 # NOTE: For AJAX (XHR) loads see
 #  https://stackoverflow.com/questions/3709597/wait-until-all-jquery-ajax-requests-are-done
 # -----------------------------------------------------------------------------
 # NOTE: For getStyleValue helper see
 #  https://stackoverflow.com/questions/16965515/how-to-get-a-style-attribute-from-a-css-class-by-javascript-jquery
 # -----------------------------------------------------------------------------
 # Adapter generated: {{site.time}}
 # -----------------------------------------------------------------------------
*/
'use strict';

j1.adapter['mmenu'] = (function (j1, window) {

  // ---------------------------------------------------------------------------
  // globals
  // ---------------------------------------------------------------------------
  var environment                 = '{{environment}}';
  var dclFinished                 = false;
  var moduleOptions               = {};
  var _this;
  var logger;
  var logText;

  // ---------------------------------------------------------------------------
  // helper functions
  // ---------------------------------------------------------------------------


  // ---------------------------------------------------------------------------
  // main object
  // ---------------------------------------------------------------------------
  return {

    // -------------------------------------------------------------------------
    // module initializer
    // -------------------------------------------------------------------------
    init: function (options) {
      // initialize state flag
      j1.adapter.mmenu.state = 'pending';

      // -----------------------------------------------------------------------
      // defaults
      // -----------------------------------------------------------------------
      var settings  = $.extend({
        module_name: 'j1.adapter.mmenu',
        generated:   '{{site.time}}'
      }, options);
      _this         = j1.adapter.mmenu;
      logger        = log4javascript.getLogger('j1.adapter.mmenu');

      // -----------------------------------------------------------------------
      // options loader
      // -----------------------------------------------------------------------
      var navMenuOptions = {};

      navMenuOptions     = $.extend({}, {{nav_mmenu_options | replace: '=>', ':' }});

      // save config settings into the mmenu object for global access
      //
      j1.adapter.mmenu['navMenuOptions'] = navMenuOptions;

      // Load (individual) frontmatter options (currently NOT used)
      //
      if (options  != null) { var frontmatterOptions = $.extend({}, options) }

      _this.setState('started');
      logger.info('state: ' + _this.getState());
      logger.info('module is being initialized');

      // -----------------------------------------------------------------------
      // data loader
      // -----------------------------------------------------------------------
      $.when (
        j1.xhrData ( // mmenu
          'j1.adapter.mmenu', {
          xhr_container_id: navMenuOptions.xhr_container_id,
          xhr_data_path:    navMenuOptions.xhr_data_path },
          'mmenu_loaded'))
      .done (function (mmenu) {
      // -----------------------------------------------------------------------
      // core initializer
      // -----------------------------------------------------------------------
        var dependencies_met_mmenu_loaded = setInterval (function () {
          if (mmenu && _this.getState() === 'mmenu_loaded') {
            const menu_selector = document.querySelector( '#' + navMenuOptions.xhr_container_id );
            const navbar_toggler = document.querySelector( "#navbar-toggler" );

            _this.setState('processing');
            logger.info('status: ' + _this.getState());
            logger.info('initialize mmenu core');

            const menu = new MmenuLight (
              menu_selector,
              '(max-width: ' + navMenuOptions.mmenu_plugin.max_width +'px)', {
              // plugin options
              node:             navMenuOptions.mmenu_plugin.node,
              mediaQuery:       navMenuOptions.mmenu_plugin.mediaQuery
            });

            const navigator = menu.navigation ({
              // navigator options
              selected:         navMenuOptions.mmenu_navigator.selected,
              slidingSubmenus:  navMenuOptions.mmenu_navigator.slidingSubmenus,
              title:            navMenuOptions.mmenu_navigator.title,
              theme:            navMenuOptions.mmenu_navigator.theme
            });

            const drawer = menu.offcanvas ({
              // drawer options
              position: navMenuOptions.mmenu_drawer.position
            });

            // Toggle Bars (Hamburger) for the NavBar to open|close
            // the mmenu drawer
            $('button.navigator.navbar-toggler').each(function(e) {
              var $this = $(this);

              $this.on('click', function(e){
                var toggler = this;

                // TODO: Animated toggle button
                //
                $('button.navigator.navbar-toggler.animated').toggleClass('fadeIn');
                $('button.navigator.navbar-toggler.animated').toggleClass('rotateIn')

                $('.mdi', this).toggleClass('mdi-menu');
                $('.mdi', this).toggleClass('mdi-close');
                e.preventDefault();
                (toggler.t = !toggler.t) ? drawer.open() : drawer.close();
              });
            });
            clearInterval(dependencies_met_mmenu_loaded);

          }; // END mmenu_loaded
        }); // END dependencies_met_mmenu_loaded
      }); // END done
    }, // END init

    // -------------------------------------------------------------------------
    // messageHandler
    // Manage messages (paylods) send from other J1 modules
    // -------------------------------------------------------------------------
    messageHandler: function (sender, message) {
      // var json_message = JSON.stringify(message, undefined, 2);              // multiline
      var json_message = JSON.stringify(message);

      logText = 'received message from ' + sender + ': ' + json_message;
      logger.debug(logText);

      // -----------------------------------------------------------------------
      //  Process commands|actions
      // -----------------------------------------------------------------------
      if (message.type === 'command' && message.action === 'module_initialized') {
        //
        // Place handling of command|action here
        //
        logger.info(message.text);
      }
      if (message.type === 'command' && message.action === 'status') {
        logger.info('messageHandler: received - ' + message.action);
      }

      //
      // Place handling of other command|action here
      //

      return true;
    }, // END messageHandler

    // -------------------------------------------------------------------------
    // setState
    // Set the current (processing) state of the module
    // -------------------------------------------------------------------------
    setState: function (stat) {
      j1.adapter.mmenu.state = stat;
    }, // END setState

    // -------------------------------------------------------------------------
    // getState
    // Returns the current (processing) state of the module
    // -------------------------------------------------------------------------
    getState: function () {
      return j1.adapter.mmenu.state;
    } // END state

  }; // END return
})(j1, window);

{% endcapture %}
{{ cache | strip_empty_lines }}
{% assign cache = nil %}
